<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面试准备中</title>
    <link href="/2024/12/10/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B8%AD/"/>
    <url>/2024/12/10/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h1>JavaScript基础</h1>2412<h2>JavaScript有哪些数据类型？区别是什么</h2>JavaScript有八种数据类型，分为原始类型和应用类型<br><strong>原始类型</strong><br>1.Undefined：表示变量未初始化，声明后为赋值2.Null：表示一个空的值或一个不存在的对象3.Bollean：true and false4.Number：双精度64位二进制格式浮点数，可以表示整数和浮点数。包括NaN(not a number)和Infinity。5.String：字符序列，用单引号、双引号或反括号括起来的文本。6.Symbol：唯一且不可变的值，用于对象属性唯一标识。7.Bigint：表示任意精度的大整数。<strong>引用类型</strong>Object(普通对象、数组、函数)<h3>两者区别</h3>1.原始类型存储在栈里面，值直接保存变量访问的位置；引用类型存储在堆里面，变量保存的是对实际对象的引用指针，引用存储在栈里。2.原始类型复制的是值本身，引用类型复制的是引用（指针），多个变量引用同一个对象时一个变量的修改会影响其他变量。<h3>扩展</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-number">1.</span>使用<span class="hljs-keyword">typeof</span>检查原始类型<br><span class="hljs-number">2.</span>使用<span class="hljs-keyword">instanceof</span>检查引用类型 <br>[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> === <span class="hljs-literal">true</span><br><span class="hljs-number">3.</span><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> 返回 <span class="hljs-built_in">object</span><br><span class="hljs-number">4.</span>字符串与数字相加，数字会被转换为字符串<br></code></pre></td></tr></table></figure><p>2413</p><h2>如何判断JavaScript变量是数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(obj).<span class="hljs-title function_">slice</span>(<span class="hljs-number">8</span>,-<span class="hljs-number">1</span>)===<span class="hljs-string">&#x27;Array&#x27;</span>;<br><span class="hljs-number">2.</span>obj.<span class="hljs-property">_proto_</span>===<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-number">3.</span><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj);<br><span class="hljs-number">4.</span>obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span><br>检查<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>是否存在于对象的原型链中<br><span class="hljs-number">5.</span><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeof</span>(obj)<br></code></pre></td></tr></table></figure><p>2414</p><h2>null和Undefined的区别</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// 输出: &quot;undefined&quot;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span> <span class="hljs-literal">null</span>); <span class="hljs-comment">// 输出: &quot;object&quot;</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">undefined</span> == <span class="hljs-literal">null</span>); <span class="hljs-comment">// 输出: true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">undefined</span> === <span class="hljs-literal">null</span>); <span class="hljs-comment">// 输出: false</span><br></code></pre></td></tr></table></figure><p>2415</p><h2>为什么typeof null是object</h2>null作为空指针二进制表示为00000000，对象的类型标识符前3位也为000<p>2416</p><h2>typeof和instanceof区别</h2>1.typeof用于检测基本数据类型以及函数、未定义数据类型和symbol，instanceof检测对象的具体类型，检测某个对象是否是某个构造函数的实例。2.typeof对于引用类型只会返回object<p>2419</p><h2>typeof NaN的结果是什么</h2>typeof NaN === number1.NaN是唯一不等于自身的值，NaN！==NaN的结果返回true2.isNaN()可以用于判断<p>2421</p><h2>==操作符强制类型转换的规则</h2>1.null和Undefined仅相等于自身和对方2.如果有一个操作数是布尔值，javaScript会把布尔值转换为数字 true-1 false-03.字符串和数字比较，会将字符串转换为数字4.如果一个操作数是对象，另一个是原始类型，Js会尝试调用toPrimitive方法（valueof或toString）将对象转换为原始类型5.Symbol类型只能与Symbol类型进行比较，与其他类型的比较总是返回false<p><strong>特殊情况</strong><br>1.空字符串会转换为数字0进行比较<br>2.对象转换为原始类型，对象的比较会触发类型转换，通过调用toPrimitive方法（valueof或toString）转换为原始类型后再比较</p><p>2424</p><h2>Js其他值到布尔值的转换规则</h2>转换为false：1.undefined 2.null 3.false 4.+0 5.-0 6.NaN 7.""（空字符串）<br>转换为true：1.非空字符串 2.非零数字3.对象（包括空对象）4.数组（包括空数组）5.函数<p>2427</p><h2>Js中的包装类型</h2>Js提供了三种包装类型，String、Number、Boolean。当访问一个原始值的属性或方法时，js会在后台自动创建一个对应的包装对象，然后在该对象上调用方法或访问属性。一旦操作完成，这个临时创建的对象会被销毁。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> strPrimitive=<span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-keyword">let</span> strObject=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-keyword">typeof</span> strPrimitive <span class="hljs-comment">//string</span><br><span class="hljs-keyword">typeof</span> strObject<span class="hljs-comment">//object</span><br></code></pre></td></tr></table></figure><p>2429</p><h2>Js中+什么时候用于字符串拼接</h2>1.两个操作数有一个是字符串，则+执行字符串拼接2.两个操作数都是数字或一方是null或布尔值，则+执行数值加法3.如果操作数是对象，会首先转换为原始值，再根据原始值类型进行操作<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]+[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<span class="hljs-regexp">//</span><span class="hljs-string">&quot;1,2,34,5,6&quot;</span><br>&#123;&#125;+&#123;&#125;<span class="hljs-regexp">//</span><span class="hljs-string">&quot;[object Object][object Object]&quot;</span><br></code></pre></td></tr></table></figure><p>2432</p><h2>Map和Object区别</h2>1.Map默认情况下不包含任何键，Object有原型，有可能和自己在对象上的设置的键名产生冲突。2.Map的键可以是任意值，Object的键只能是字符串，对象的属性名会自动转换为字符串类型。3.Map中的key有序，Object对象属性没有固定顺序。4.Map可以直接被迭代，并且提供了遍历和操作的方法。迭代Object需要通过Object.keys(),Object.values(),Object.entries()来遍历对象的属性。<p>2436</p><h2>对JSON的理解</h2>JSON（js对象表示法）是一种轻量级数据交换格式，易于阅读编写也便于机器解析和生成。主要用于数据交换，尤其是Web浏览器和服务器之间。同时用于存储配置文件。<br>JSON.parse()将JSON字符串解析为JS对象，JSON.stringify()将JS对象转换为JSON字符串。<p>2437</p><h2>JS脚本延迟加载的方式</h2>1.使用async属性 2.使用defer属性 3.动态创建脚本元素 4.使用模块化加载工具<h3>async属性</h3>让脚本尽可能异步加载，不会阻塞HTML解析，脚本一旦下载完成就立即执行。<h3>defer属性</h3>保证了所有defer脚本会按照文档中出现的顺序执行，并且是HTML解析完成后执行。<h3>动态创建脚本元素</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-keyword">var</span> <span class="hljs-variable language_">script</span>=document.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br><span class="hljs-variable language_">script</span>.src=<span class="hljs-string">&#x27;example.js&#x27;</span>;<br>document.head.appendChild(<span class="hljs-variable language_">script</span>);<br></code></pre></td></tr></table></figure>可以灵活控制脚本加载和执行时机<h3>使用模块化加载工具</h3>利用RequireJS，Webpack的动态加载，解决代码拆分和按需加载的问题。<h2>箭头函数</h2><h3>1. 作用域中的 this 绑定</h3>箭头函数：箭头函数不会创建自己的 this，而是从定义位置的上下文中继承 this 值。这意味着箭头函数中的 this 指向的是它外层最近的非箭头函数的 this，即词法作用域。普通函数：普通函数在调用时会动态地决定 this 的指向。它的 this 指向由调用者决定，例如通过直接调用（指向全局对象）、对象方法调用（指向该对象）、构造函数调用（指向新实例）等。<h3>应用场景</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">回调函数<br>setTimeout(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this),<span class="hljs-number">1000</span>)<br>数组操作<br>与<span class="hljs-built_in">map</span>、<span class="hljs-built_in">filter</span>、<span class="hljs-built_in">reduce</span>方法一起使用 nums.<span class="hljs-built_in">map</span>(<span class="hljs-function"><span class="hljs-params">n</span>=&gt;</span>n*<span class="hljs-number">2</span>)<br>简洁表达<br>链式调用<br>fetch(url).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>res.json())<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//无箭头函数时候</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">data</span>:[],<br>    <span class="hljs-attr">getData</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//在没有箭头函数的时候，大家通常是这么解决问题的</span><br>        <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span><span class="hljs-comment">//这里的this就是obj对象了，getData的上一层可不就是obj</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//没有使用箭头函数，会出现问题，所以要加上var _this = this，然后使用_this</span><br>            <span class="hljs-keyword">var</span> result = [<span class="hljs-string">&quot;小余&quot;</span>,<span class="hljs-string">&#x27;coderwhy&#x27;</span>,<span class="hljs-string">&#x27;JS高级&#x27;</span>]<br>            _this.<span class="hljs-property">data</span> = result<span class="hljs-comment">//_this是外层的变量，这里就形成了一个闭包</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>        &#125;,<span class="hljs-number">2000</span>)<br>    &#125;<br>&#125;<br><br>obj.<span class="hljs-title function_">getData</span>()<span class="hljs-comment">//没有使用箭头函数或者没有声明一个变量来接收getData里面的this的时候，为什么是window，那是因为foo函数绑定到obj上面啦，obj的上层就是全局window了，这是隐式绑定</span><br></code></pre></td></tr></table></figure><p>在setTimeout等异步函数内部直接使用this，会遇到this指向全局对象的问题，因为这些函数不是由obj直接调用的<br>而声明var _this &#x3D; this;是以前常见的模式，用于在闭包中保持对外部this的引用。在这种模式下，_this变量保存了getData方法调用时的this值（即obj对象）</p><h3>2.与普通函数的区别</h3>1.箭头函数没有prototype，所以箭头函数本身没有this2.箭头函数的this指向在定义的时候继承自外层第一个普通函数的this（箭头函数的this指向定义时所在的外层第一个普通函数，和使用位置无关；被继承的普通函数的this指向改变，箭头函数的this跟着改变）3.不能够直接修改箭头函数的this指向，可以通过修改被继承的普通函数的this指向来改变箭头函数的this指向。4.箭头函数外层没有普通函数，严格模式和非严格模式下this都会指向window5.箭头函数的this指向全局，使用arguments会报未声明的错误，箭头函数的this指向普通函数，它的arguments继承于该普通函数。6.箭头函数没有constructor，使用new调用箭头函数会报错，也不支持new.target返回该函数的引用]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端练习</title>
    <link href="/2024/12/07/%E5%89%8D%E7%AB%AF%E7%BB%83%E4%B9%A0/"/>
    <url>/2024/12/07/%E5%89%8D%E7%AB%AF%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>牛客编程练习</h1><h1>入门篇</h1><h2>HTML</h2><h3>FEd1 表单类型</h3>描述:在form标签里，依次写出以下类型的输入框。1. 类型为密码，默认值为"nowcoder"2. 类型为复选框，且状态为已勾选代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 补全代码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;nowcoder&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd2 表格结构</h3>描述:请写出具有表格标题为"nowcoder"的2行3列表格结构。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>nowcoder<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>   <br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd3 图像标签属性</h3>描述:请写出具有标题属性和代替文本属性的图片标签。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>      //填写JavaScript<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片地址&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;标题&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;代替文本&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd4  新窗口打开文档</h3>描述:请写出可以在新窗口打开文档的a标签。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* 填写JavaScript */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd5 自定义列表</h3>描述:请写出列表项为"nowcoder"且列表项内容也为"nowcoder"的自定义列表。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>nowcoder<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>nowcoder<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* 填写JavaScript */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd6  语义化标签</h3>描述:请使用语义化标签创建头部标签且包含导航标签。注意：只需在html模块填写标签结构，有且仅有一个头部标签和一个导航标签。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* 填写JavaScript */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd7 音频媒体标签属性</h3>太简单了，跳过<h3>FEd8 加粗文字</h3>太简单了，跳过<h3>FEd9 视频媒体标签属性</h3>描述：请写出具有当视频的媒体数据加载期间发生错误时执行某个方法事件的视频媒体标签。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;function()&quot;</span> <span class="hljs-attr">controls</span>&gt;</span>加载失败<span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* 填写JavaScript */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2>CSS</h2><h3>FEd10 CSS选择器——标签、类、ID选择器</h3>描述:请将html模块中字体内容是"红色"的字体颜色设置为"rgb(255, 0, 0)"，"绿色"设置为"rgb(0, 128, 0)"，"黑色"设置为"rgb(0, 0, 0)"，且字体大小都为20px。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">utf-8</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*补全代码*/</span></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.green</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>)</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#black</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;green&#x27;</span>&gt;</span>绿色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;black&#x27;</span>&gt;</span>黑色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd11 CSS选择器——伪类选择器</h3>描述:请将html模块中ul列表的第2个li标签和第4个li标签的背景颜色设置成"rgb(255, 0, 0)"。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>),<span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)</span><br><span class="language-css">        &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* 填写JavaScript */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>),<span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>)可以改写为<span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n)<br></code></pre></td></tr></table></figure> <h3>FEd12 CSS选择器——伪元素</h3> 描述:请给html模块的div元素加一个后伪元素，且后伪元素的宽度和高度都是20px，背景颜色为"rgb(255, 0, 0)"。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);</span><br><span class="language-css">            <span class="hljs-attribute">display</span>:block</span><br><span class="language-css">        &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* 填写JavaScript */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>div::after表示在div元素后插入内容。在元素上，content 的初始值为 ‘normal’。在:before和:after上，如果指定了content 的初始值为 ‘normal’，则计算为 ‘none’ 。content 的值设置为 ‘none’ 不会生成伪元素。所以:before和:after才需要指定一个看似无意义的 content: ""; 来初始化content的值。题目规定了宽高，为了使宽高设置有效又必须显式定义该伪元素为块级元素，也就是语句 display:block<h3>FEd13 按要求写一个圆</h3>描述：请将html模块的div元素设置为一个半径是50px的圆，且边框为1px的黑色实线。要求：1. 圆角属性仅设置一个值2. 圆角属性单位请使用px注意：由于圆角属性设置广泛且都可以实现题目效果，所以请按照要求规范书写。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* 填写JavaScript */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd14  设置盒子宽高</h3>描述:请将html模块类为"box"的div元素宽度和高度都设置为100px，且内间距为20px、外间距为10px。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>:<span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd15 浮动和清除浮动</h3>描述:请将类为"left"的div元素和类为"right"的div元素在同一行上向左浮动，且清除类为"wrap"的父级div元素内部的浮动。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">    <span class="hljs-comment">/*补全代码*/</span></span><br><span class="language-css">    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">clear</span>:both;</span><br><span class="language-css">    <span class="hljs-attribute">visibility</span>: hidden</span><br><span class="language-css">&#125;</span><br><span class="language-css"> <span class="hljs-selector-class">.clearfix</span>&#123;</span><br><span class="language-css">        *zoom: <span class="hljs-number">1</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"> <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-comment">/*补全代码*/</span></span><br><span class="language-css">    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>; </span><br><span class="language-css">&#125;</span><br><span class="language-css"> <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-comment">/*补全代码*/</span></span><br><span class="language-css">    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;wrap clearfix&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;left&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;right&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* 填写JavaScript */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs xquery">清除浮动方案  <br><span class="hljs-number">1</span>.额外标签法<br>额外标签法，也成为隔墙法，是W3C推荐的做法。<br>该方法会在浮动元素末尾添加一个空的标签，例如<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;clear:both&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>或其它标签。<br>注意：这个空标签必须是块级元素。<br><br>优点：通俗易懂，方便简单<br>缺点：添加许多无意义的标签，结构化差<br> .clear&#123;<br>  clear: both;<br>&#125;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wangcai&quot;</span>&gt;</span>旺财<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xiaoqiang&quot;</span>&gt;</span>小强<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">        footer</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><br><span class="hljs-number">2</span>.父级添加overflow<br>可以给浮动元素父级添加overflow属性，将其属性值设置为hidden、auto或scroll。<br><br>优点：代码简介<br>缺点：无法显示溢出的部分或不是预期效果。<br>.box&#123;<br>    background-color: chocolate;<br>    overflow: hidden;<br>&#125;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wangcai&quot;</span>&gt;</span>旺财<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xiaoqiang&quot;</span>&gt;</span>小强<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">    footer</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="hljs-number">3</span>.:after伪元素法<br>:after方式其实是额外标签发的升级版，也就是给父元素添加如下属性：<br>.box::after&#123;<br>    content: <span class="hljs-string">&quot;&quot;</span>;<br>    height: <span class="hljs-number">0</span>;<br>    clear: both;<br>    display: block;<br>    visibility: hidden;<br>&#125;<br>/* IE <span class="hljs-number">6</span>、<span class="hljs-number">7</span>适配 */<br>.box &#123;<br>    *zoom: <span class="hljs-number">1</span>;<br>&#125;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wangcai&quot;</span>&gt;</span>旺财<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xiaoqiang&quot;</span>&gt;</span>小强<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">    footer</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>优点：没有增加标签，结构更简单<br>缺点：需适配低版本浏览器<br>代表网站：百度、网易等<br><br><span class="hljs-number">4</span>.双伪元素清除浮动<br>通过:before添加了前置伪元素，代码如下：<br>.box::before,.box::after&#123;<br>    content: <span class="hljs-string">&quot;&quot;</span>;<br>    display: table;<br>&#125;<br>.box::after&#123;<br>    clear: both;<br>&#125;<br>/* IE <span class="hljs-number">6</span>、<span class="hljs-number">7</span>适配 */<br>.box&#123;<br>    zoom: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wangcai&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xiaoming&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">    footer</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>优点：代码更简洁<br>缺点：需适配低版本浏览器<br>代表网站：小米、腾讯等<br></code></pre></td></tr></table></figure>清除浮动前提条件:父级没有高度、子盒子开启动、影响后续布局排版<h3>FEd16 固定定位</h3>描述:请将html模块类为"box"的div元素固定在视口的左上角。代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-comment">/*补全代码*/</span></span><br><span class="language-css">    </span><br><span class="language-css">&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;box&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/* 填写JavaScript */</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd17 段落标识</h3>太简单了，跳过<h3>FEd18 设置文字颜色</h3>描述:请使用嵌入样式将所有p标签设置为红色文字代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 填写标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> &gt;</span>欢迎来到牛客网<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在这里，我们为你提供了IT名企的笔试面试题库<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在这里，我们以题会友<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> p=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;p.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">            p[i].<span class="hljs-property">style</span>.<span class="hljs-property">color</span>=<span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>Fed19 圣诞树</h3>描述:圣诞节来啦！请用CSS给你的朋友们制作一颗圣诞树吧~这颗圣诞树描述起来是这样的：1. "topbranch"是圣诞树的上枝叶，该上枝叶仅通过边框属性、左浮动、左外边距即可实现。边框的属性依次是：宽度为100px、是直线、颜色为green（未显示的边框颜色都为透明）2. "middleBranch"是圣诞树的中枝叶，该上枝叶仅通过边框属性即可实现。边框的属性依次是：宽度为200px、是直线、颜色为green（未显示的边框颜色都为透明）3. "base"是圣诞树的树干，该树干仅通过左外边距实现居中于中枝叶。树干的宽度、高度分别为70px、200px，颜色为gray。注意：1. 上枝叶、树干的居中都是通过左外边距实现的2. 没有显示的边框，其属性都是透明（属性）3. 仅通过border属性完成边框的所有属性设置!<img src="/2024/12/07/%E5%89%8D%E7%AB%AF%E7%BB%83%E4%B9%A0/image.png"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.topbranch</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">                        * <span class="hljs-doctag">TODO:</span> 上枝叶效果</span></span><br><span class="hljs-comment"><span class="language-css">                        */</span></span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">100px</span> solid transparent;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom-color</span>: green;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.middleBranch</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">                        * <span class="hljs-doctag">TODO:</span> 中枝叶效果</span></span><br><span class="hljs-comment"><span class="language-css">                        */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">200px</span> solid transparent;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom-color</span>: green;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.base</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">                        * <span class="hljs-doctag">TODO:</span> 树干效果</span></span><br><span class="hljs-comment"><span class="language-css">                        */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">70px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: gray;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">165px</span>;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;topbranch&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;middleBranch&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;base&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2>ES5</h2><h3>FEd20  基本数据类型检测</h3>描述:请补全JavaScript函数，要求以字符串的形式返回参数的类型。注意：只需检测基本数据类型。代码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">       <span class="hljs-comment">/* 填写样式 */</span></span></span><br><span class="language-css"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 填写标签 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 填写JavaScript</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">_typeof</span>(<span class="hljs-params">value</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> <span class="hljs-title function_">typeof</span>(value)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3>FEd21 检测复杂数据类型</h3>描述:请补全JavaScript函数，要求以Boolean的形式返回第一个参数是否属于第二个参数对象的实例。代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 填写标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">_instanceof</span>(<span class="hljs-params">left,right</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> (left <span class="hljs-keyword">instanceof</span> right)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd22  数据类型转换</h3>描述:请补全JavaScript函数，要求以字符串的形式返回两个数字参数的拼接结果。示例：1. _splice(223,233) -> "223233"2. _splice(-223,-233) -> "-223-233"代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 填写标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">_splice</span>(<span class="hljs-params">left,right</span>) &#123;</span><br><span class="language-javascript">            left1=left.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">            right1=right.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> left1.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;&#x27;</span>,right1)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还有很多方法：<br>1.${}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">return</span> <span class="hljs-variable">$&#123;left&#125;</span><span class="hljs-variable">$&#123;right&#125;</span><br></code></pre></td></tr></table></figure><p>2.String()</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">return</span> <span class="hljs-built_in">left</span>+String(<span class="hljs-built_in">right</span>)<br></code></pre></td></tr></table></figure><p>3.toString()</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">return <span class="hljs-attribute">left</span><span class="hljs-selector-class">.toString</span>()+<span class="hljs-attribute">right</span><span class="hljs-selector-class">.toString</span>()<br></code></pre></td></tr></table></figure><p>4.字符串拼接</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-keyword">return</span> <span class="hljs-literal">left</span>+<span class="hljs-string">&#x27;&#x27;</span>+<span class="hljs-literal">right</span><br></code></pre></td></tr></table></figure><h3>FEd23 阶乘</h3>描述:请补全JavaScript函数，要求返回数字参数的阶乘。注意：参数为大于等于0的整数。代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 填写标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">_factorial</span>(<span class="hljs-params">number</span>) &#123;</span><br><span class="language-javascript">   <span class="hljs-keyword">if</span>(number===<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> number</span><br><span class="language-javascript">   <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> number*<span class="hljs-title function_">_factorial</span>(number-<span class="hljs-number">1</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd24 字符串字符统计</h3>描述:统计字符串中每个字符的出现频率，返回一个 Object,  key为统计字符，value 为出现频率1. 不限制 key 的顺序2. 输入的字符串参数不会为空3. 忽略空白字符<br>输入描述：'hello world'<br>输出描述：{h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}<br>代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 填写标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">str</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> arr=<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(str);</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> obj=&#123;&#125;;</span><br><span class="language-javascript">            arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,i</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(item!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(!obj.<span class="hljs-title function_">hasOwnProperty</span>(item))&#123;</span><br><span class="language-javascript">                        obj[item]=<span class="hljs-number">1</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                        obj[item] +=<span class="hljs-number">1</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> obj;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd25 从大到小排序</h3>描述：请补全JavaScript函数，要求将数组参数中的数字从大到小进行排序并返回。代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 填写标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">_sort</span>(<span class="hljs-params">array</span>) &#123;</span><br><span class="language-javascript">            array.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<span class="hljs-keyword">return</span> b-a&#125;);</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> array;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>FEd26 对象属性键名</h3>描述:请补全JavaScript函数，要求以数组的形式输出对象各个属性的键名。示例：1. _keys({name:'nowcoder',age:7}) -> ['name','age']注意：只需考虑对象属性均为原始数据类型的情况。代码：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-comment">/* 填写样式 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 填写标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 填写JavaScript</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">_keys</span>(<span class="hljs-params">object</span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(object)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3>手写JS代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-number">1.</span>手写<span class="hljs-title class_">Object</span>.<span class="hljs-property">create</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">obj</span>)&#123;<br>    funticon <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>)&#123;&#125;<br>    F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>=obj<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br>将传入的对象作为原型<br><br><span class="hljs-number">2.</span>手写<span class="hljs-keyword">instanceof</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myInstanceof</span>(<span class="hljs-params">left,right</span>)&#123;<br>    <span class="hljs-keyword">let</span> proto=<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(left),<br>        prototype=right.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!proto)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(proto===prototype)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        proto=<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(proto);<br>    &#125;<br>&#125;<br><span class="hljs-number">1.</span> 首先获取类型的原型<br><span class="hljs-number">2.</span> 然后获得对象的原型<br><span class="hljs-number">3.</span> 然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 <span class="hljs-literal">null</span>，因为原型链最终为 <span class="hljs-literal">null</span><br><br><span class="hljs-number">3.</span>手写<span class="hljs-keyword">new</span>函数<br>fuction <span class="hljs-title class_">ObjectFactory</span>()&#123;<br>    <span class="hljs-keyword">let</span> newObjct=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> constructor=<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-keyword">let</span> result=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> consturctor !== <span class="hljs-string">&quot;function&quot;</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;type error&quot;</span>)<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    newObject = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(constructor.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>    result=constructor.<span class="hljs-title function_">apply</span>(newObject,<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-keyword">let</span> flag=result&amp;&amp;(<span class="hljs-keyword">typeof</span> result===<span class="hljs-string">&quot;object&quot;</span>||<span class="hljs-keyword">typeof</span> result===<span class="hljs-string">&quot;function&quot;</span>);<br>    <span class="hljs-keyword">return</span> flag?<span class="hljs-attr">result</span>:newObject;<br>&#125;<br><span class="hljs-title function_">objectFactory</span>(构造函数，初始化参数)<br>（<span class="hljs-number">1</span>）首先创建了一个新的空对象<br>（<span class="hljs-number">2</span>）设置原型，将对象的原型设置为函数的 prototype 对象。<br>（<span class="hljs-number">3</span>）让函数的 <span class="hljs-variable language_">this</span> 指向这个对象，执行构造函数的代码（为这个新对象添加属性）<br>（<span class="hljs-number">4</span>）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。<br><br><span class="hljs-number">4.</span>手写<span class="hljs-title class_">Promise</span>函数<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PENDING</span>=<span class="hljs-string">&#x27;pending&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">RESOLVED</span>=<span class="hljs-string">&#x27;resolved&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REJECTED</span>=<span class="hljs-string">&#x27;rejected&#x27;</span><br><br><span class="hljs-number">5.</span>手写防抖函数<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn,wait</span>)&#123;<br>    <span class="hljs-keyword">let</span> timer=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span> context=<span class="hljs-variable language_">this</span>,<br>            args=<span class="hljs-variable language_">arguments</span>;<br>        <span class="hljs-keyword">if</span>(timer)&#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer);<br>            timer=<span class="hljs-literal">null</span>;<br>        &#125;<br>        timer=<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            fn.<span class="hljs-title function_">apply</span>(context,args);<br>        &#125;,wait)<br>    &#125;<br>&#125;<br><br><span class="hljs-number">6.</span>手写节流函数<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn,delay</span>)&#123;<br>    <span class="hljs-keyword">let</span> curTime=<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span> context=<span class="hljs-variable language_">this</span>;<br>            args=<span class="hljs-variable language_">arguments</span>;<br>            nowTime=<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>        <span class="hljs-keyword">if</span>(nowTime-curTime&gt;=delay)&#123;<br>            curTime=<span class="hljs-title class_">Date</span>.<span class="hljs-property">now</span>;<br>            <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(context,args);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">7.</span>手写call函数<br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&quot;function&quot;</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;type error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">let</span> args=[...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>        result=<span class="hljs-literal">null</span>;<br>    context=context||<span class="hljs-variable language_">window</span>;<br>    context.<span class="hljs-property">fn</span>=<span class="hljs-variable language_">this</span>;<br>    result=context.<span class="hljs-title function_">fn</span>(...args);<br>    <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span>;<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-number">1.</span> 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。<br><span class="hljs-number">2.</span> 判断传入上下文对象是否存在，如果不存在，则设置为 <span class="hljs-variable language_">window</span> 。<br><span class="hljs-number">3.</span> 处理传入的参数，截取第一个参数后的所有参数。<br><span class="hljs-number">4.</span> 将函数作为上下文对象的一个属性。<br><span class="hljs-number">5.</span> 使用上下文对象来调用这个方法，并保存返回结果。<br><span class="hljs-number">6.</span> 删除刚才新增的属性。<br><span class="hljs-number">7.</span> 返回结果。<br><br><br><span class="hljs-number">8.</span>手写apply函数<br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span>=<span class="hljs-title class_">Function</span>(context)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !=== <span class="hljs-string">&quot;function&quot;</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;type error&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">let</span> result=<span class="hljs-literal">null</span>;<br>    context=context||<span class="hljs-variable language_">window</span>;<br>    context.<span class="hljs-property">fn</span>=<span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>])&#123;<br>        result=context.<span class="hljs-title function_">fn</span>(...<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        result=context.<span class="hljs-title function_">fn</span>();<br>    &#125;<br>    <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-number">9.</span>数组去重<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">uniqueArray</span>(<span class="hljs-params">array</span>)&#123;<br>    <span class="hljs-keyword">let</span> map=&#123;&#125;;<br>    <span class="hljs-keyword">let</span> arr=[];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;array.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!map.<span class="hljs-title function_">hasOwnProperty</span>([array[<span class="hljs-number">1</span>]]))&#123;<br>            map[array[i]]=<span class="hljs-number">1</span>;<br>            arr.<span class="hljs-title function_">push</span>(array[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array))<br><br><span class="hljs-number">10.</span>数组flat方法<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">_flat</span>(<span class="hljs-params">arr,depth</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr)||depth&lt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev,cur</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(cur))&#123;<br>            <span class="hljs-keyword">return</span> prev.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">_flat</span>(cur,depth-<span class="hljs-number">1</span>))<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> prev.<span class="hljs-property">concat</span>;<br>        &#125;<br>    &#125;,[])<br>&#125;<br><br><span class="hljs-number">11.</span>循环打印红绿灯<br><span class="hljs-keyword">function</span> task=<span class="hljs-function">(<span class="hljs-params">timer,light</span>)=&gt;</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(light===<span class="hljs-string">&#x27;red&#x27;</span>)&#123;<br>                <span class="hljs-title function_">red</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(light===<span class="hljs-string">&#x27;green&#x27;</span>)&#123;<br>                <span class="hljs-title function_">green</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(light===<span class="hljs-string">&#x27;yellow&#x27;</span>)&#123;<br>                <span class="hljs-title function_">yellow</span>();<br>            &#125;<br>            <span class="hljs-title function_">resolve</span>();<br>        &#125;,timer)<br>    &#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">step</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-title function_">task</span>(<span class="hljs-number">3000</span>,red)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-title function_">task</span>(<span class="hljs-number">2000</span>,green))<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-title function_">task</span>(<span class="hljs-number">1000</span>,yellow))<br>        .<span class="hljs-title function_">then</span>(step)<br>&#125;<br><span class="hljs-title function_">step</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3学习笔记</title>
    <link href="/2024/11/11/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/11/11/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>模板语法</strong></p><p>Vue 使用一种基于 HTML 的模板语法，能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p><p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p><p>文本插值<br>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>双大括号标签会被替换为相应组件实例中 msg 属性的值。同时每次 msg 属性更改时它也会同步更新。</p><p><strong>原始 HTML</strong><br>双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，你需要使用 v-html 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;p&gt;Using text interpolation: &#123;&#123; rawHtml &#125;&#125;&lt;/p&gt;<br>&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>这里遇到了一个新的概念。这里看到的 v-html attribute 被称为一个指令。指令由 v- 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，它们将为渲染的 DOM 应用特殊的响应式行为。这里我们做的事情简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 rawHtml 属性保持同步。</p><p>span 的内容将会被替换为 rawHtml 属性的值，插值为纯 HTML——数据绑定将会被忽略。注意，你不能使用 v-html 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。</p><p><strong>Attribute 绑定</strong><br>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 v-bind 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>v-bind 指令指示 Vue 将元素的 id attribute 与组件的 dynamicId 属性保持一致。如果绑定的值是 null 或者 undefined，那么该 attribute 将会从渲染的元素上移除。</p><p>布尔型 Attribute​<br>布尔型 attribute 依据 true &#x2F; false 值来决定 attribute 是否应该存在于该元素上。disabled 就是最常见的例子之一。</p><p>v-bind 在这种场景下的行为略有不同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;button :disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>当 isButtonDisabled 为真值或一个空字符串 (即 button disabled&#x3D;””) 时，元素会包含这个 disabled attribute。而当其为其他假值时 attribute 将被忽略。</p><p>动态绑定多个值​<br>如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">objectOfAttrs</span>: &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;container&#x27;</span>,<br>      <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;wrapper&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过不带参数的 v-bind，你可以将它们绑定到单个元素上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;div v-bind=&quot;objectOfAttrs&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>使用 JavaScript 表达式​<br>至此，我们仅在模板中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs template">&#123;&#123; number + 1 &#125;&#125;<br><br>&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<br><br>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br><br>&lt;div :id=&quot;`list-$&#123;id&#125;`&quot;&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>这些表达式都会被作为 JavaScript ，以当前组件实例为作用域解析执行。</p><p>在 Vue 模板内，JavaScript 表达式可以被使用在如下场景上：</p><p>1.在文本插值中 (双大括号)</p><p>2.在任何 Vue 指令 (以 v- 开头的特殊 attribute) attribute 的值中</p><p>受限的全局访问​<br>模板中的表达式将被沙盒化，仅能够访问到有限的全局对象列表。该列表中会暴露常用的内置全局对象，比如 Math 和 Date。</p><p>没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 window 上的属性。然而，也可以自行在 app.config.globalProperties 上显式地添加它们，供所有的 Vue 表达式使用。</p><p><strong>指令 Directives</strong><br>指令是带有 v- 前缀的特殊 attribute。Vue 提供了许多内置指令，包括上面的v-bind 和 v-html。</p><p>指令 attribute 的期望值为一个 JavaScript 表达式 (除了少数几个例外，即之后要讨论到的 v-for、v-on 和 v-slot)。一个指令的任务是在其表达式的值变化时响应式地更新 DOM。以 v-if 为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;p v-if=&quot;seen&quot;&gt;Now you see me&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>这里，v-if 指令会基于表达式 seen 的值的真假来移除&#x2F;插入该 </p><p> 元素。</p><p>参数 Arguments​<br>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 v-bind 指令来响应式地更新一个 HTML attribute：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;a v-bind:href=&quot;url&quot;&gt; ... &lt;/a&gt;<br><br>&lt;!-- 简写 --&gt;<br>&lt;a :href=&quot;url&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure><p>这里 href 就是一个参数，它告诉 v-bind 指令将表达式 url 的值绑定到元素的 href attribute 上。在简写中，参数前的一切 (例如 v-bind:) 都会被缩略为一个 : 字符。</p><p>另一个例子是 v-on 指令，它将监听 DOM 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br><br>&lt;!-- 简写 --&gt;<br>&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure><p>这里的参数是要监听的事件名称：click。v-on 有一个相应的缩写，即 @ 字符。我们之后也会讨论关于事件处理的更多细节。</p><p><strong>动态参数</strong><br>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs template"><br>&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;<br><br>&lt;!-- 简写 --&gt;<br>&lt;a :[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure><p>这里的 attributeName 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 attributeName，其值为 “href”，那么这个绑定就等价于 v-bind:href。</p><p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br><br>&lt;!-- 简写 --&gt;<br>&lt;a @[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure><p>在此示例中，当 eventName 的值是 “focus” 时，v-on:[eventName] 就等价于 v-on:focus。</p><p>动态参数值的限制​<br>动态参数中表达式的值应当是一个<strong>字符串</strong>，或者是 null。特殊值 null 意为显式移除该绑定。其他非字符串的值会触发警告。</p><p>动态参数语法的限制​<br>动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 HTML attribute 名称中都是不合法的。例如下面的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;!-- 这会触发一个编译器警告 --&gt;<br><br>&lt;a :[&#x27;foo&#x27; + bar]=&quot;value&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure><p>如果你需要传入一个复杂的动态参数，推荐使用计算属性替换复杂的表达式，也是 Vue 最基础的概念之一。</p><p>当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，我们需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;a :[someAttr]=&quot;value&quot;&gt; ... &lt;/a&gt;<br></code></pre></td></tr></table></figure><p>上面的例子将会在 DOM 内嵌模板中被转换为 :[someattr]。如果你的组件拥有 “someAttr” 属性而非 “someattr”，这段代码将不会工作。单文件组件内的模板不受此限制。</p><p><strong>修饰符 Modifiers</strong><br>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 .prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault()：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs template">&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>最后，可以直观地看到完整的指令语法：</p><p><img src="https://cn.vuejs.org/assets/directive.DtZKvoAo.png" alt="指令语法图"></p><h2 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h2><p><strong>声明响应式状态</strong></p><p>选用选项式 API 时，会用 <code>data</code> 选项来声明组件的响应式状态。此选项的值应为返回一个对象的函数。Vue 将在创建新组件实例的时候调用此函数，并将函数返回的对象用响应式系统进行包装。此对象的所有顶层属性都会被代理到组件实例 (即方法和生命周期钩子中的 <code>this</code>) 上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-comment">// `mounted` 是生命周期钩子，之后我们会讲到</span><br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// `this` 指向当前组件实例</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>) <span class="hljs-comment">// =&gt; 1</span><br><br>    <span class="hljs-comment">// 数据属性也可以被更改</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = <span class="hljs-number">2</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这些实例上的属性仅在实例首次创建时被添加，因此需要确保它们都出现在 <code>data</code> 函数返回的对象上。若所需的值还未准备好，在必要时也可以使用 <code>null</code>、<code>undefined</code> 或者其他一些值占位。</p><p><strong>声明方法</strong></p><p>要为组件添加方法，我们需要用到 <code>methods</code> 选项。它应该是一个包含所有方法的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 在其他方法或是生命周期中也可以调用方法</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">increment</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Vue 自动为 <code>methods</code> 中的方法绑定了<strong>永远指向组件实例</strong>的 <code>this</code>。这确保了方法在作为事件监听器或回调函数时始终保持正确的 <code>this</code>。不应该在定义 <code>methods</code> 时使用箭头函数，因为箭头函数没有自己的 <code>this</code> 上下文。</p><p><strong>DOM 更新时机</strong></p><p>当你修改了响应式状态时，DOM 会被自动更新。但是需要注意的是，DOM 更新不是同步的。Vue 会在“next tick”更新周期中缓冲所有状态的修改，以确保不管你进行了多少次状态修改，每个组件都只会被更新一次。</p><p>要等待 DOM 更新完成后再执行额外的代码，可以使用 <a href="https://cn.vuejs.org/api/general.html#nexttick">nextTick()</a> 全局 API：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; nextTick &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">nextTick</span>()<br>      <span class="hljs-comment">// 现在 DOM 已经更新了</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p><strong>计算属性缓存 vs 方法</strong></p><p>我们在表达式中像这样调用一个函数也会获得和计算属性相同的结果：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">calculateBooksMessage</span>() &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 组件中</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">calculateBooksMessage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">author</span>.<span class="hljs-property">books</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的，然而，不同之处在于<strong>计算属性值会基于其响应式依赖被缓存</strong>。一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 <code>author.books</code> 不改变，无论多少次访问 <code>publishedBooksMessage</code> 都会立即返回先前的计算结果，而不用重复执行 getter 函数。</p><p>这也解释了为什么下面的计算属性永远不会更新，因为 <code>Date.now()</code> 并不是一个响应式依赖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-title function_">now</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相比之下，方法调用<strong>总是</strong>会在重渲染发生时再次执行函数。</p><p>为什么需要缓存呢？想象一下我们有一个非常耗性能的计算属性 <code>list</code>，需要循环一个巨大的数组并做许多计算逻辑，并且可能也有其他计算属性依赖于 <code>list</code>。没有缓存的话，我们会重复执行非常多次 <code>list</code> 的 getter，然而这实际上没有必要！如果确定不需要缓存，那么也可以使用方法调用。</p><p><strong>可写计算属性</strong></p><p>计算属性默认是只读的。当尝试修改一个计算属性时，会收到一个运行时警告。只在某些特殊场景中可能才需要用到“可写”的属性，可以通过同时提供 getter 和 setter 来创建：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">export default &#123;<br>  <span class="hljs-keyword">data</span>() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      firstName: <span class="hljs-string">&#x27;John&#x27;</span>,<br>      lastName: <span class="hljs-string">&#x27;Doe&#x27;</span><br>    &#125;<br>  &#125;,<br>  computed: &#123;<br>    fullName: &#123;<br>      <span class="hljs-comment">// getter</span><br>      <span class="hljs-keyword">get</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">this</span>.lastName<br>      &#125;,<br>      <span class="hljs-comment">// setter</span><br>      <span class="hljs-keyword">set</span>(newValue) &#123;<br>        <span class="hljs-comment">// 注意：我们这里使用的是解构赋值语法</span><br>        [<span class="hljs-keyword">this</span>.firstName, <span class="hljs-keyword">this</span>.lastName] = newValue.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在当你再运行 <code>this.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用而 <code>this.firstName</code> 和 <code>this.lastName</code> 会随之更新。</p><h1 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h1><p>数据绑定的一个常见需求场景是操纵元素的 CSS class 列表和内联样式。因为 <code>class</code> 和 <code>style</code> 都是 attribute，我们可以和其他 attribute 一样使用 <code>v-bind</code> 将它们和动态的字符串绑定。但是，在处理比较复杂的绑定时，通过拼接生成字符串是麻烦且易出错的。因此，Vue 专门为 <code>class</code> 和 <code>style</code> 的 <code>v-bind</code> 用法提供了特殊的功能增强。除了字符串外，表达式的值也可以是对象或数组。</p><h2 id="绑定-HTML-class"><a href="#绑定-HTML-class" class="headerlink" title="绑定 HTML class"></a>绑定 HTML class</h2><p>绑定对象</p><p>我们可以给 <code>:class</code> (<code>v-bind:class</code> 的缩写) 传递一个对象来动态切换 class：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>上面的语法表示 <code>active</code> 是否存在取决于数据属性 <code>isActive</code> 的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">真假值</a>。</p><p>你可以在对象中写多个字段来操作多个 class。此外，<code>:class</code> 指令也可以和一般的 <code>class</code> attribute 共存。举例来说，下面这样的状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配合以下模板：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;div<br>  <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">static</span>&quot;<span class="hljs-attr"></span></span><br><span class="hljs-attr"><span class="hljs-class">  :class</span>=&quot;</span>&#123; active: isActive, <span class="hljs-string">&#x27;text-danger&#x27;</span>: hasError &#125;<span class="hljs-string">&quot;</span><br><span class="hljs-string">&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>渲染的结果会是：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">static</span> <span class="hljs-symbol">active</span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p>当 <code>isActive</code> 或者 <code>hasError</code> 改变时，class 列表会随之更新。举例来说，如果 <code>hasError</code> 变为 <code>true</code>，class 列表也会变成 <code>&quot;static active text-danger&quot;</code>。</p><p>绑定的对象并不一定需要写成内联字面量的形式，也可以直接绑定一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">classObject</span>: &#123;<br>      <span class="hljs-attr">active</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>template</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;classObject&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>这将渲染：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>我们也可以绑定一个返回对象的<a href="https://cn.vuejs.org/guide/essentials/computed.html">计算属性</a>。这是一个常见且很有用的技巧：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span>() &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    isActive: <span class="hljs-literal">true</span>,<br>    error: <span class="hljs-literal">null</span><br>  &#125;<br>&#125;,<br>computed: &#123;<br>  classObject() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      active: <span class="hljs-keyword">this</span>.isActive &amp;&amp; !<span class="hljs-keyword">this</span>.error,<br>      <span class="hljs-string">&#x27;text-danger&#x27;</span>: <span class="hljs-keyword">this</span>.error &amp;&amp; <span class="hljs-keyword">this</span>.error.type === <span class="hljs-string">&#x27;fatal&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;classObject&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>绑定数组</p><p>我们可以给 <code>:class</code> 绑定一个数组来渲染多个 CSS class：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">activeClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,<br>    <span class="hljs-attr">errorClass</span>: <span class="hljs-string">&#x27;text-danger&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>渲染的结果是：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;active text-danger&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>如果你也想在数组中有条件地渲染某个 class，你可以使用三元表达式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p><code>errorClass</code> 会一直存在，但 <code>activeClass</code> 只会在 <code>isActive</code> 为真时才存在。</p><p>然而，这可能在有多个依赖条件的 class 时会有些冗长。因此也可以在数组中嵌套对象：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;[&#123; [activeClass]: isActive &#125;, errorClass]&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><p>绑定对象</p><p><code>:style</code> 支持绑定 JavaScript 对象值，对应的是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style">HTML 元素的 <code>style</code> 属性</a>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>() &#123;</span><br><span class="hljs-class">  <span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class">    <span class="hljs-title">activeColor</span>: &#x27;<span class="hljs-title">red&#x27;</span>,</span><br><span class="hljs-class">    <span class="hljs-title">fontSize</span>: 30</span><br><span class="hljs-class">  &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:style=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>尽管推荐使用 camelCase，但 <code>:style</code> 也支持 kebab-cased 形式的 CSS 属性 key (对应其 CSS 中的实际名称)，例如：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:style=<span class="hljs-string">&quot;&#123; &#x27;font-size&#x27;: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>直接绑定一个样式对象通常是一个好主意，这样可以使模板更加简洁：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">data</span><span class="hljs-params">()</span></span> &#123;<br>  return &#123;<br>    styleObject: &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>      fontSize: <span class="hljs-string">&#x27;13px&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:style=<span class="hljs-string">&quot;styleObject&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>同样的，如果样式对象需要更复杂的逻辑，也可以使用返回样式对象的计算属性。</p><p>绑定数组</p><p>我们还可以给 <code>:style</code> 绑定一个包含多个样式对象的数组。这些对象会被合并后渲染到同一元素上：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:style=<span class="hljs-string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>自动前缀</p><p>当你在 <code>:style</code> 中使用了需要<a href="https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix">浏览器特殊前缀</a>的 CSS 属性时，Vue 会自动为他们加上相应的前缀。Vue 是在运行时检查该属性是否支持在当前浏览器中使用。如果浏览器不支持某个属性，那么将尝试加上各个浏览器特殊前缀，以找到哪一个是被支持的。</p><p>样式多值</p><p>你可以对一个样式属性提供多个 (不同前缀的) 值，举例来说：</p><p>template</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div <span class="hljs-symbol">:style=<span class="hljs-string">&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>数组仅会渲染浏览器支持的最后一个值。在这个示例中，在支持不需要特别前缀的浏览器中都会渲染为 <code>display: flex</code>。</p><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染<a href="https://cn.vuejs.org/guide/essentials/conditional.html#conditional-rendering"></a></h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code><a href="https://cn.vuejs.org/guide/essentials/conditional.html#v-if"></a></h2><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a><code>v-else</code><a href="https://cn.vuejs.org/guide/essentials/conditional.html#v-else"></a></h2><p>你也可以使用 <code>v-else</code> 为 <code>v-if</code> 添加一个“else 区块”。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;awesome = !awesome&quot;</span>&gt;</span>Toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>Oh no 😢<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个 <code>v-else</code> 元素必须跟在一个 <code>v-if</code> 或者 <code>v-else-if</code> 元素后面，否则它将不会被识别。</p><h2 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a><code>v-else-if</code><a href="https://cn.vuejs.org/guide/essentials/conditional.html#v-else-if"></a></h2><p>顾名思义，<code>v-else-if</code> 提供的是相应于 <code>v-if</code> 的“else if 区块”。它可以连续多次重复使用：</p><p>template</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;<br>  A<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;<br>  B<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;<br>  C<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>&gt;<br>  Not A<span class="hljs-regexp">/B/</span>C<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>和 <code>v-else</code> 类似，一个使用 <code>v-else-if</code> 的元素必须紧跟在一个 <code>v-if</code> 或一个 <code>v-else-if</code> 元素后面。</p><h2 id="上的-v-if"><a href="#上的-v-if" class="headerlink" title="&lt;template&gt; 上的 v-if"></a><code>&lt;template&gt;</code> 上的 <code>v-if</code><a href="https://cn.vuejs.org/guide/essentials/conditional.html#v-if-on-template"></a></h2><p>因为 <code>v-if</code> 是一个指令，他必须依附于某个元素。但如果我们想要切换不止一个元素，在这种情况下我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-if</code>，这只是一个不可见的包装器元素，最后渲染的结果并不会包含这个 <code>&lt;template&gt;</code> 元素。</p><p>template</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>v-else</code> 和 <code>v-else-if</code> 也可以在 <code>&lt;template&gt;</code> 上使用。</p><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code><a href="https://cn.vuejs.org/guide/essentials/conditional.html#v-show"></a></h2><p>另一个可以用来按条件显示一个元素的指令是 <code>v-show</code>。其用法基本一样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不同之处在于 <code>v-show</code> 会在 DOM 渲染中保留该元素；<code>v-show</code> 仅切换了该元素上名为 <code>display</code> 的 CSS 属性。</p><p><code>v-show</code> 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 <code>v-else</code> 搭配使用。</p><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染<a href="https://cn.vuejs.org/guide/essentials/list.html#list-rendering"></a></h1><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><code>v-for</code><a href="https://cn.vuejs.org/guide/essentials/list.html#v-for"></a></h2><p>我们可以使用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令的值需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据的数组，而 <code>item</code> 是迭代项的<strong>别名</strong>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>() &#123;</span><br><span class="hljs-class">  <span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class">    <span class="hljs-title">items</span>: [&#123; <span class="hljs-title">message</span>: &#x27;<span class="hljs-type">Foo</span>&#x27; &#125;, &#123; <span class="hljs-title">message</span>: &#x27;<span class="hljs-type">Bar</span>&#x27; &#125;]</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.message</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在 <code>v-for</code> 块中可以完整地访问父作用域内的属性和变量。<code>v-for</code> 也支持使用可选的第二个参数表示当前项的位置索引。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>() &#123;</span><br><span class="hljs-class">  <span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class">    <span class="hljs-title">parentMessage</span>: &#x27;<span class="hljs-type">Parent</span>&#x27;,</span><br><span class="hljs-class">    <span class="hljs-title">items</span>: [&#123; <span class="hljs-title">message</span>: &#x27;<span class="hljs-type">Foo</span>&#x27; &#125;, &#123; <span class="hljs-title">message</span>: &#x27;<span class="hljs-type">Bar</span>&#x27; &#125;]</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">parentMessage</span> &#125;&#125;</span><span class="language-xml"> - </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">index</span> &#125;&#125;</span><span class="language-xml"> - </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.message</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Parent</span> - <span class="hljs-number">0</span> - Foo<br><br><span class="hljs-attribute">Parent</span> - <span class="hljs-number">1</span> - Bar<br></code></pre></td></tr></table></figure><p><code>v-for</code> 变量的作用域和下面的 JavaScript 代码很类似：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parentMessage = <span class="hljs-string">&#x27;Parent&#x27;</span><br><span class="hljs-keyword">const</span> items = [<br>  <span class="hljs-comment">/* ... */</span><br>]<br><br>items.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 可以访问外层的 `parentMessage`</span><br>  <span class="hljs-comment">// 而 `item` 和 `index` 只在这个作用域可用</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(parentMessage, item.<span class="hljs-property">message</span>, index)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="v-for-与对象"><a href="#v-for-与对象" class="headerlink" title="v-for 与对象"></a><code>v-for</code> 与对象<a href="https://cn.vuejs.org/guide/essentials/list.html#v-for-with-an-object"></a></h2><p>你也可以使用 <code>v-for</code> 来遍历一个对象的所有属性。遍历的顺序会基于对该对象调用 <code>Object.values()</code> 的返回值来决定。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>() &#123;</span><br><span class="hljs-class">  <span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class">    <span class="hljs-title">myObject</span>: &#123;</span><br><span class="hljs-class">      <span class="hljs-title">title</span>: &#x27;<span class="hljs-type">How</span> <span class="hljs-title">to</span> <span class="hljs-title">do</span> <span class="hljs-title">lists</span> <span class="hljs-title">in</span> <span class="hljs-type">Vue</span>&#x27;,</span><br><span class="hljs-class">      <span class="hljs-title">author</span>: &#x27;<span class="hljs-type">Jane</span> <span class="hljs-type">Doe</span>&#x27;,</span><br><span class="hljs-class">      <span class="hljs-title">publishedAt</span>: &#x27;2016-04-10&#x27;</span><br><span class="hljs-class">    &#125;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;value in myObject&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>可以通过提供第二个参数表示属性名 (例如 key)：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, key) in myObject&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">key</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>第三个参数表示位置索引：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, key, index) in myObject&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">index</span> &#125;&#125;</span><span class="language-xml">. </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">key</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="在-v-for-里使用范围值"><a href="#在-v-for-里使用范围值" class="headerlink" title="在 v-for 里使用范围值"></a>在 <code>v-for</code> 里使用范围值<a href="https://cn.vuejs.org/guide/essentials/list.html#v-for-with-a-range"></a></h2><p><code>v-for</code> 可以直接接受一个整数值。在这种用例中，会将该模板基于 <code>1...n</code> 的取值范围重复多次。</p><p>template</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in 10&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">n</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意此处 <code>n</code> 的初值是从 <code>1</code> 开始而非 <code>0</code>。</p><h2 id="v-for-与-v-if"><a href="#v-for-与-v-if" class="headerlink" title="v-for 与 v-if"></a><code>v-for</code> 与 <code>v-if</code></h2><p>当它们同时存在于一个节点上时，<code>v-if</code> 比 <code>v-for</code> 的优先级更高。这意味着 <code>v-if</code> 的条件将无法访问到 <code>v-for</code> 作用域内定义的变量别名：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml"> 这会抛出一个错误，因为属性 todo 此时</span></span><br><span class="hljs-comment"><span class="language-xml"> 没有在该实例上定义</span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">todo.name</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在外先包装一层 <code>&lt;template&gt;</code> 再在其上使用 <code>v-for</code> 可以解决这个问题 (这也更加明显易读)：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">todo.name</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="数组变化侦测"><a href="#数组变化侦测" class="headerlink" title="数组变化侦测"></a>数组变化侦测<a href="https://cn.vuejs.org/guide/essentials/list.html#array-change-detection"></a></h2><h3 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法<a href="https://cn.vuejs.org/guide/essentials/list.html#mutation-methods"></a></h3><p>Vue 能够侦听响应式数组的变更方法，并在它们被调用时触发相关的更新。这些变更方法包括：</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><h3 id="替换一个数组"><a href="#替换一个数组" class="headerlink" title="替换一个数组"></a>替换一个数组<a href="https://cn.vuejs.org/guide/essentials/list.html#replacing-an-array"></a></h3><p>变更方法，顾名思义，就是会对调用它们的原数组进行变更。相对地，也有一些不可变 (immutable) 方法，例如 <code>filter()</code>，<code>concat()</code> 和 <code>slice()</code>，这些都不会更改原数组，而总是<strong>返回一个新数组</strong>。当遇到的是非变更方法时，我们需要将旧的数组替换为新的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">items</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">message</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/Foo/</span>))<br></code></pre></td></tr></table></figure><p>你可能认为这将导致 Vue 丢弃现有的 DOM 并重新渲染整个列表——幸运的是，情况并非如此。Vue 实现了一些巧妙的方法来最大化对 DOM 元素的重用，因此用另一个包含部分重叠对象的数组来做替换，仍会是一种非常高效的操作。</p><h2 id="展示过滤或排序后的结果"><a href="#展示过滤或排序后的结果" class="headerlink" title="展示过滤或排序后的结果"></a>展示过滤或排序后的结果<a href="https://cn.vuejs.org/guide/essentials/list.html#displaying-filtered-sorted-results"></a></h2><p>有时，我们希望显示数组经过过滤或排序后的内容，而不实际变更或重置原始数据。在这种情况下，你可以创建返回已过滤或已排序数组的计算属性。</p><p>举例来说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">numbers</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>  &#125;<br>&#125;,<br><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-title function_">evenNumbers</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">numbers</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in evenNumbers&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">n</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在计算属性不可行的情况下 (例如在多层嵌套的 <code>v-for</code> 循环中)，你可以使用以下方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">sets</span>: [[ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]]<br>  &#125;<br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">even</span>(<span class="hljs-params">numbers</span>) &#123;<br>    <span class="hljs-keyword">return</span> numbers.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> <span class="hljs-built_in">number</span> % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;numbers in sets&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in even(numbers)&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">n</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#event-handling"></a></h1><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#listening-to-events"></a></h2><p>我们可以使用 <code>v-on</code> 指令 (简写为 <code>@</code>) 来监听 DOM 事件，并在事件触发时执行对应的 JavaScript。用法：<code>v-on:click=&quot;handler&quot;</code> 或 <code>@click=&quot;handler&quot;</code>。</p><p>事件处理器 (handler) 的值可以是：</p><ol><li><strong>内联事件处理器</strong>：事件被触发时执行的内联 JavaScript 语句 (与 <code>onclick</code> 类似)。</li><li><strong>方法事件处理器</strong>：一个指向组件上定义的方法的属性名或是路径</li></ol><h2 id="内联事件处理器"><a href="#内联事件处理器" class="headerlink" title="内联事件处理器"></a>内联事件处理器<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#inline-handlers"></a></h2><p>内联事件处理器通常用于简单场景，例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>() &#123;</span><br><span class="hljs-class">  <span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class">    <span class="hljs-title">count</span>: 0</span><br><span class="hljs-class">  &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>Add 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Count is: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">count</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="方法事件处理器"><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#method-handlers"></a></h2><p>随着事件处理器的逻辑变得愈发复杂，内联代码方式变得不够灵活。因此 <code>v-on</code> 也可以接受一个方法名或对某个方法的调用。</p><p>举例来说：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">data</span>() &#123;<br>  return &#123;<br>    name: <span class="hljs-string">&#x27;Vue.js&#x27;</span><br>  &#125;<br>&#125;,<br>methods: &#123;<br>  <span class="hljs-built_in">greet</span>(event) &#123;<br>    <span class="hljs-comment">// 方法中的 `this` 指向当前活跃的组件实例</span><br>    <span class="hljs-built_in">alert</span>(`Hello $&#123;this.name&#125;!`)<br>    <span class="hljs-comment">// `event` 是 DOM 原生事件</span><br>    if (event) &#123;<br>      <span class="hljs-built_in">alert</span>(event.target.tagName)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- `greet` 是上面定义过的方法名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;greet&quot;</span>&gt;</span>Greet<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方法事件处理器会自动接收原生 DOM 事件并触发执行。在上面的例子中，我们能够通过被触发事件的 <code>event.target</code> 访问到该 DOM 元素。</p><h2 id="在内联事件处理器中访问事件参数"><a href="#在内联事件处理器中访问事件参数" class="headerlink" title="在内联事件处理器中访问事件参数"></a>在内联事件处理器中访问事件参数<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#accessing-event-argument-in-inline-handlers"></a></h2><p>有时我们需要在内联事件处理器中访问原生 DOM 事件。你可以向该处理器方法传入一个特殊的 <code>$event</code> 变量，或者使用内联箭头函数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用特殊的 $event 变量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;</span><br>  Submit<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用内联箭头函数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;(event) =&gt; warn(&#x27;Form cannot be submitted yet.&#x27;, event)&quot;</span>&gt;</span><br>  Submit<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">methods: &#123;<br>  <span class="hljs-built_in">warn</span>(message, event) &#123;<br>    <span class="hljs-comment">// 这里可以访问 DOM 原生事件</span><br>    if (event) &#123;<br>      event<span class="hljs-selector-class">.preventDefault</span>()<br>    &#125;<br>    <span class="hljs-built_in">alert</span>(message)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#event-modifiers"></a></h2><p>在处理事件时调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是很常见的。尽管我们可以直接在方法内调用，但如果方法能更专注于数据逻辑而不用去处理 DOM 事件的细节会更好。</p><p>为解决这一问题，Vue 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。修饰符是用 <code>.</code> 表示的指令后缀，包含以下这些：</p><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.self</code></li><li><code>.capture</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><p><code>.capture</code>、<code>.once</code> 和 <code>.passive</code> 修饰符与<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#options">原生 <code>addEventListener</code> 事件</a>相对应：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加事件监听器时，使用 `capture` 捕获模式 --&gt;</span><br><span class="hljs-comment">&lt;!-- 例如：指向内部元素的事件，在被内部元素处理前，先被外部处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 点击事件最多被触发一次 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 滚动事件的默认行为 (scrolling) 将立即发生而非等待 `onScroll` 完成 --&gt;</span><br><span class="hljs-comment">&lt;!-- 以防其中包含 `event.preventDefault()` --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">scroll.passive</span>=<span class="hljs-string">&quot;onScroll&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>.passive</code> 修饰符一般用于触摸事件的监听器，可以用来<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#%E4%BD%BF%E7%94%A8_passive_%E6%94%B9%E5%96%84%E6%BB%9A%E5%B1%8F%E6%80%A7%E8%83%BD">改善移动端设备的滚屏性能</a>。</p><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#key-modifiers"></a></h2><p>在监听键盘事件时，我们经常需要检查特定的按键。Vue 允许在 <code>v-on</code> 或 <code>@</code> 监听按键事件时添加按键修饰符。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 仅在 `key` 为 `Enter` 时调用 `submit` --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>你可以直接使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/UI_Events/Keyboard_event_key_values"><code>KeyboardEvent.key</code></a> 暴露的按键名称作为修饰符，但需要转为 kebab-case 形式。</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">&lt;<span class="hljs-keyword">input</span> @keyup.<span class="hljs-keyword">page</span>-down=<span class="hljs-string">&quot;onPageDown&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>在上面的例子中，仅会在 <code>$event.key</code> 为 <code>&#39;PageDown&#39;</code> 时调用事件处理。</p><h3 id="按键别名"><a href="#按键别名" class="headerlink" title="按键别名"></a>按键别名<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#key-aliases"></a></h3><p>Vue 为一些常用的按键提供了别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“Delete”和“Backspace”两个按键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><h3 id="系统按键修饰符"><a href="#系统按键修饰符" class="headerlink" title="系统按键修饰符"></a>系统按键修饰符<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#system-modifier-keys"></a></h3><p>你可以使用以下系统按键修饰符来触发鼠标或键盘事件监听器，只有当按键被按下时才会触发。</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul><h3 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a><code>.exact</code> 修饰符<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#exact-modifier"></a></h3><p><code>.exact</code> 修饰符允许精确控制触发事件所需的系统修饰符的组合。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.ctrl</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.ctrl.exact</span>=<span class="hljs-string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.exact</span>=<span class="hljs-string">&quot;onClick&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="鼠标按键修饰符"><a href="#鼠标按键修饰符" class="headerlink" title="鼠标按键修饰符"></a>鼠标按键修饰符<a href="https://cn.vuejs.org/guide/essentials/event-handling.html#mouse-button-modifiers"></a></h2><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><p>这些修饰符将处理程序限定为由特定鼠标按键触发的事件。</p><h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定<a href="https://cn.vuejs.org/guide/essentials/forms.html#form-input-bindings"></a></h1><p>在前端处理表单时，常常需要将表单输入框的内容同步给 JavaScript 中相应的变量。手动连接<strong>值绑定和更改事件监听器</strong>可能会很麻烦：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input<br>  :<span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;text&quot;</span><br>  @<span class="hljs-attribute">input</span>=<span class="hljs-string">&quot;event =&gt; text = event.target.value&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><code>v-model</code> 指令帮我们简化了这一步骤：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>另外，<code>v-model</code> 还可以用于各种不同类型的输入，<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 元素。它会根据所使用的元素自动使用对应的 DOM 属性和事件组合：</p><ul><li>文本类型的 <code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code> 元素会绑定 <code>value</code> property 并侦听 <code>input</code> 事件；</li><li><code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code> 会绑定 <code>checked</code> property 并侦听 <code>change</code> 事件；</li><li><code>&lt;select&gt;</code> 会绑定 <code>value</code> property 并侦听 <code>change</code> 事件。</li></ul><p>注意</p><p><code>v-model</code> 会忽略任何表单元素上初始的 <code>value</code>、<code>checked</code> 或 <code>selected</code> attribute。它将始终将当前绑定的 JavaScript 状态视为数据的正确来源。应该在 JavaScript 中使用<a href="https://cn.vuejs.org/api/options-state.html#data"><code>data</code></a> 选项来声明该<strong>初始值</strong>。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法<a href="https://cn.vuejs.org/guide/essentials/forms.html#basic-usage"></a></h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本<a href="https://cn.vuejs.org/guide/essentials/forms.html#text"></a></h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message is: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;edit me&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本<a href="https://cn.vuejs.org/guide/essentials/forms.html#multiline-text"></a></h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Multiline message is:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre-line;&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;add multiple lines&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意在 <code>&lt;textarea&gt;</code> 中是不支持插值表达式的。需要使用 <code>v-model</code> 来替代。</p><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框<a href="https://cn.vuejs.org/guide/essentials/forms.html#checkbox"></a></h3><p>单一的复选框，绑定布尔类型值：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">checked</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮<a href="https://cn.vuejs.org/guide/essentials/forms.html#radio"></a></h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Picked: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">picked</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;One&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Two&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器<a href="https://cn.vuejs.org/guide/essentials/forms.html#select"></a></h3><p>单个选择器的示例如下：</p><p>template</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Selected: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">selected</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Please select one<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定<a href="https://cn.vuejs.org/guide/essentials/forms.html#value-bindings"></a></h2><p>对于单选按钮，复选框和选择器选项，<code>v-model</code> 绑定的值通常是静态的字符串 (或者对复选框是布尔值)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- `picked` 在被选择时是字符串 &quot;a&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- `toggle` 只会为 true 或 false --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;toggle&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- `selected` 在第一项被选中时为字符串 &quot;abc&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>ABC<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但有时我们可能希望将该值绑定到当前组件实例上的动态数据。这可以通过使用 <code>v-bind</code> 来实现。此外，使用 <code>v-bind</code> 还使我们可以将选项值绑定为非字符串的数据类型。</p><h3 id="复选框-1"><a href="#复选框-1" class="headerlink" title="复选框"></a>复选框<a href="https://cn.vuejs.org/guide/essentials/forms.html#checkbox-1"></a></h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input<br>  type<span class="hljs-operator">=</span><span class="hljs-string">&quot;checkbox&quot;</span><br>  v-model<span class="hljs-operator">=</span><span class="hljs-string">&quot;toggle&quot;</span><br>  true-value<span class="hljs-operator">=</span><span class="hljs-string">&quot;yes&quot;</span><br>  false-value<span class="hljs-operator">=</span><span class="hljs-string">&quot;no&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><code>true-value</code> 和 <code>false-value</code> 是 Vue 特有的 attributes，仅支持和 <code>v-model</code> 配套使用。这里 <code>toggle</code> 属性的值会在选中时被设为 <code>&#39;yes&#39;</code>，取消选择时设为 <code>&#39;no&#39;</code>。你同样可以通过 <code>v-bind</code> 将其绑定为其他动态值：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;input<br>  type=<span class="hljs-string">&quot;checkbox&quot;</span><br>  v-model=<span class="hljs-string">&quot;toggle&quot;</span><br>  <span class="hljs-symbol">:true-value=<span class="hljs-string">&quot;dynamicTrueValue&quot;</span></span><br>  <span class="hljs-symbol">:false-value=<span class="hljs-string">&quot;dynamicFalseValue&quot;</span></span> /&gt;<br></code></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符<a href="https://cn.vuejs.org/guide/essentials/forms.html#modifiers"></a></h2><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code><a href="https://cn.vuejs.org/guide/essentials/forms.html#lazy"></a></h3><p>默认情况下，<code>v-model</code> 会在每次 <code>input</code> 事件后更新数据 (<a href="https://cn.vuejs.org/guide/essentials/forms.html#vmodel-ime-tip">IME 拼字阶段的状态</a>例外)。你可以添加 <code>lazy</code> 修饰符来改为在每次 <code>change</code> 事件后更新数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在 &quot;change&quot; 事件后同步更新而不是 &quot;input&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="number"><a href="#number" class="headerlink" title=".number"></a><code>.number</code><a href="https://cn.vuejs.org/guide/essentials/forms.html#number"></a></h3><p>如果你想让用户输入自动转换为数字，你可以在 <code>v-model</code> 后添加 <code>.number</code> 修饰符来管理输入：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">&lt;<span class="hljs-built_in">input</span> v-model.<span class="hljs-keyword">number</span>=<span class="hljs-string">&quot;age&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>如果该值无法被 <code>parseFloat()</code> 处理，那么将返回原始值。</p><p><code>number</code> 修饰符会在输入框有 <code>type=&quot;number&quot;</code> 时自动启用。</p><h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code><a href="https://cn.vuejs.org/guide/essentials/forms.html#trim"></a></h3><p>如果你想要默认自动<strong>去除用户输入内容中两端的空格</strong>，你可以在 <code>v-model</code> 后添加 <code>.trim</code> 修饰符：</p><p>template</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">input</span> v-model.<span class="hljs-keyword">trim</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><h1 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子<a href="https://cn.vuejs.org/guide/essentials/lifecycle.html#lifecycle-hooks"></a></h1><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码。</p><h2 id="注册周期钩子"><a href="#注册周期钩子" class="headerlink" title="注册周期钩子"></a>注册周期钩子<a href="https://cn.vuejs.org/guide/essentials/lifecycle.html#registering-lifecycle-hooks"></a></h2><p>举例来说，<code>mounted</code> 钩子可以用来在组件完成初始渲染并创建 DOM 节点后运行代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`the component is now mounted.`</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有其他一些钩子，会在实例生命周期的不同阶段被调用，最常用的是 <a href="https://cn.vuejs.org/api/options-lifecycle.html#mounted"><code>mounted</code></a>、<a href="https://cn.vuejs.org/api/options-lifecycle.html#updated"><code>updated</code></a> 和 <a href="https://cn.vuejs.org/api/options-lifecycle.html#unmounted"><code>unmounted</code></a>。</p><p>所有生命周期钩子函数的 <code>this</code> 上下文都会自动指向当前调用它的组件实例。注意：避免用箭头函数来定义生命周期钩子，因为如果这样的话你将无法在函数中通过 <code>this</code> 获取组件实例。</p><h2 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示<a href="https://cn.vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram"></a></h2><p>下面是实例生命周期的图表。你现在并不需要完全理解图中的所有内容，但以后它将是一个有用的参考。</p><p><img src="https://cn.vuejs.org/assets/lifecycle_zh-CN.W0MNXI0C.png" alt="组件生命周期图示"></p><h1 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器<a href="https://cn.vuejs.org/guide/essentials/watchers.html#watchers"></a></h1><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例<a href="https://cn.vuejs.org/guide/essentials/watchers.html#basic-example"></a></h2><p>计算属性允许我们声明性地计算衍生值。然而在有些情况下，我们需要在状态变化时执行一些“副作用”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。</p><p>在选项式 API 中，我们可以使用 <a href="https://cn.vuejs.org/api/options-state.html#watch"><code>watch</code> 选项</a>在每次响应式属性发生变化时触发一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">question</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-attr">answer</span>: <span class="hljs-string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span>,<br>      <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-comment">// 每当 question 改变时，这个函数就会执行</span><br>    <span class="hljs-title function_">question</span>(<span class="hljs-params">newQuestion, oldQuestion</span>) &#123;<br>      <span class="hljs-keyword">if</span> (newQuestion.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;?&#x27;</span>)) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAnswer</span>()<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">getAnswer</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">true</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Thinking...&#x27;</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://yesno.wtf/api&#x27;</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = (<span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()).<span class="hljs-property">answer</span><br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">answer</span> = <span class="hljs-string">&#x27;Error! Could not reach the API. &#x27;</span> + error<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  Ask a yes/no question:</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;question&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;loading&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">answer</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="深层侦听器"><a href="#深层侦听器" class="headerlink" title="深层侦听器"></a>深层侦听器<a href="https://cn.vuejs.org/guide/essentials/watchers.html#deep-watchers"></a></h2><p><code>watch</code> 默认是浅层的：被侦听的属性，仅在被赋新值时，才会触发回调函数——而嵌套属性的变化不会触发。如果想侦听所有嵌套的变更，你需要深层侦听器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">someObject</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;<br>        <span class="hljs-comment">// 注意：在嵌套的变更中，</span><br>        <span class="hljs-comment">// 只要没有替换对象本身，</span><br>        <span class="hljs-comment">// 那么这里的 `newValue` 和 `oldValue` 相同</span><br>      &#125;,<br>      <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="即时回调的侦听器"><a href="#即时回调的侦听器" class="headerlink" title="即时回调的侦听器"></a>即时回调的侦听器<a href="https://cn.vuejs.org/guide/essentials/watchers.html#eager-watchers"></a></h2><p><code>watch</code> 默认是<strong>懒执行</strong>的：仅当数据源变化时，才会执行回调。但在某些场景中，我们希望在创建侦听器时，立即执行一遍回调。举例来说，我们想<strong>请求一些初始数据，然后在相关状态更改时重新请求数据</strong>。</p><p>我们可以用一个对象来声明侦听器，这个对象有 <code>handler</code> 方法和 <code>immediate: true</code> 选项，这样便能强制回调函数立即执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">question</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params">newQuestion</span>) &#123;<br>        <span class="hljs-comment">// 在组件实例创建时会立即调用</span><br>      &#125;,<br>      <span class="hljs-comment">// 强制立即执行回调</span><br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>回调函数的初次执行就发生在 <code>created</code> 钩子之前。Vue 此时已经处理了 <code>data</code>、<code>computed</code> 和 <code>methods</code> 选项，所以这些属性在第一次调用时就是可用的。</p><h2 id="回调的触发时机"><a href="#回调的触发时机" class="headerlink" title="回调的触发时机"></a>回调的触发时机<a href="https://cn.vuejs.org/guide/essentials/watchers.html#callback-flush-timing"></a></h2><p>当更改了响应式状态，它可能会同时触发 Vue 组件更新和侦听器回调。</p><p>类似于组件更新，用户创建的侦听器回调函数也会被批量处理以避免重复调用。例如，如果我们同步将一千个项目推入被侦听的数组中，我们可能不希望侦听器触发一千次。</p><p>默认情况下，侦听器回调会在父组件更新 (如有) <strong>之后</strong>、所属组件的 DOM 更新<strong>之前</strong>被调用。<strong>这意味着如果你尝试在侦听器回调中访问所属组件的 DOM，那么 DOM 将处于更新前的状态。</strong></p><h3 id="Post-Watchers"><a href="#Post-Watchers" class="headerlink" title="Post Watchers"></a>Post Watchers<a href="https://cn.vuejs.org/guide/essentials/watchers.html#post-watchers"></a></h3><p>如果想在侦听器回调中能访问被 Vue 更新<strong>之后</strong>的所属组件的 DOM，你需要指明 <code>flush: &#39;post&#39;</code> 选项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">key</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>      <span class="hljs-attr">flush</span>: <span class="hljs-string">&#x27;post&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="同步侦听器"><a href="#同步侦听器" class="headerlink" title="同步侦听器"></a>同步侦听器<a href="https://cn.vuejs.org/guide/essentials/watchers.html#sync-watchers"></a></h3><p>你还可以创建一个同步触发的侦听器，它会在 Vue 进行任何更新之前触发：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">key</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>      <span class="hljs-attr">flush</span>: <span class="hljs-string">&#x27;sync&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="this-watch"><a href="#this-watch" class="headerlink" title="this.$watch()"></a><code>this.$watch()</code><a href="https://cn.vuejs.org/guide/essentials/watchers.html#this-watch"></a></h2><p>我们也可以使用组件实例的 <a href="https://cn.vuejs.org/api/component-instance.html#watch"><code>$watch()</code> 方法</a>来命令式地创建一个侦听器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.$watch(<span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">newQuestion</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// ...</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要在特定条件下设置一个侦听器，或者只侦听响应用户交互的内容，这方法很有用。它还允许你提前停止该侦听器。</p><h1 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用<a href="https://cn.vuejs.org/guide/essentials/template-refs.html#template-refs"></a></h1><p>虽然 Vue 的声明性渲染模型抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问<strong>底层 DOM</strong> 元素。要实现这一点，我们可以使用特殊的 <code>ref</code> attribute：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">ref</span>=&quot;input&quot;&gt;<br></code></pre></td></tr></table></figure><p><code>ref</code> 是一个特殊的 attribute，和 <code>v-for</code> 章节中提到的 <code>key</code> 类似。它<strong>允许我们在一个特定的 DOM 元素或子组件实例被挂载后，获得对它的直接引用</strong>。这可能很有用，比如说在组件挂载时将焦点设置到一个 input 元素上，或在一个元素上初始化一个第三方库。</p><h2 id="访问模板引用"><a href="#访问模板引用" class="headerlink" title="访问模板引用"></a>访问模板引用<a href="https://cn.vuejs.org/guide/essentials/template-refs.html#accessing-the-refs"></a></h2><p>挂载结束后引用都会被暴露在 <code>this.$refs</code> 之上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">input</span>.<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>注意，你只可以<strong>在组件挂载后</strong>才能访问模板引用。如果你想在模板中的表达式上访问 <code>$refs.input</code>，在初次渲染时会是 <code>undefined</code>。因为在初次渲染前这个元素还不存在。</p><h2 id="函数模板引用"><a href="#函数模板引用" class="headerlink" title="函数模板引用"></a>函数模板引用<a href="https://cn.vuejs.org/guide/essentials/template-refs.html#function-refs"></a></h2><p>除了使用字符串值作名字，<code>ref</code> attribute 还可以绑定为一个函数，会在每次组件更新时都被调用。该函数会收到元素引用作为其第一个参数：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:ref</span>=<span class="hljs-string">&quot;(el) =&gt; </span></span></span><span class="hljs-template-variable">&#123; /* 将 el 赋值给一个数据属性或 ref 变量 */ &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意我们这里需要使用<strong>动态的 <code>:ref</code></strong> 绑定才能够传入一个函数。当绑定的元素被卸载时，函数也会被调用一次，此时的 <code>el</code> 参数会是 <code>null</code>。你当然也可以绑定一个组件方法而不是内联函数。</p><h1 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#components-basics"></a></h1><p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成一个层层嵌套的树状结构：</p><p><img src="https://cn.vuejs.org/assets/components.B1JZbf0_.png" alt="组件树"></p><p>这和嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。Vue 同样也能很好地配合原生 Web Component。</p><h2 id="定义一个组件"><a href="#定义一个组件" class="headerlink" title="定义一个组件"></a>定义一个组件<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#defining-a-component"></a></h2><p>当使用构建步骤时，我们一般会将 Vue 组件定义在一个单独的 <code>.vue</code> 文件中，这被叫做<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html">单文件组件</a> (简称 SFC)：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>You clicked me </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">count</span> &#125;&#125;</span><span class="language-xml"> times.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#using-a-component"></a></h2><p>要使用一个子组件，我们需要在父组件中导入它。假设我们把计数器组件放在了一个叫做 <code>ButtonCounter.vue</code> 的文件中，这个组件将会以默认导出的形式被暴露给外部。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ButtonCounter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ButtonCounter.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  components: &#123;</span><br><span class="hljs-template-variable">    ButtonCounter</span><br><span class="hljs-template-variable">  &#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here is a child component!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ButtonCounter</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>若要将导入的组件暴露给模板，我们需要在 <code>components</code> 选项上<a href="https://cn.vuejs.org/guide/components/registration.html"><strong>注册</strong></a>它。这个组件将会以其注册时的名字作为模板中的标签名。</p><p>也可以全局地注册一个组件，使得它在当前应用中的任何组件上都可以使用，而不需要额外再导入。</p><p>组件可以被重用任意多次：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here is a child component!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ButtonCounter</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ButtonCounter</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ButtonCounter</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>每当点击这些按钮时，每一个组件都维护着自己的状态，是不同的 <code>count</code>。这是因为每当你使用一个组件，就创建了一个新的<strong>实例</strong>。</p><p>在单文件组件中，推荐为子组件使用 <code>PascalCase</code> 的标签名，以此来和原生的 HTML 元素作区分。虽然原生 HTML 标签名是不区分大小写的，但 Vue 单文件组件是可以在编译中区分大小写的。我们也可以使用 <code>/&gt;</code> 来关闭一个标签。</p><p>如果你是直接在 DOM 中书写模板 (例如原生 <code>&lt;template&gt;</code> 元素的内容)，模板的编译需要遵从浏览器中 HTML 的解析行为。在这种情况下，你应该需要使用 <code>kebab-case</code> 形式并显式地关闭这些组件的标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 如果是在 DOM 中书写该模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="传递-props"><a href="#传递-props" class="headerlink" title="传递 props"></a>传递 props<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#passing-props"></a></h2><p>如果我们正在构建一个博客，我们可能需要一个表示博客文章的组件。我们希望所有的博客文章分享相同的视觉布局，但有不同的内容。要实现这样的效果自然必须向组件中传递数据，例如每篇文章标题和内容，这就会使用到 props。</p><p>Props 是一种特别的 attributes，在组件上声明注册。要传递给博客文章组件一个标题，我们必须在组件的 props 列表上声明它。这里要用到 <a href="https://cn.vuejs.org/api/options-state.html#props"><code>props</code></a> 选项：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- BlogPost.vue --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">title</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>当一个值被传递给 prop 时，它将成为<strong>该组件实例上的一个属性</strong>。该属性的值可以像其他组件属性一样，在模板和组件的 <code>this</code> 上下文中访问。</p><p>一个组件可以有任意多的 props，默认情况下，所有 prop 都接受任意类型的值。</p><p>当一个 prop 被注册后，可以像这样以自定义 attribute 的形式传递数据给它：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;BlogPost title<span class="hljs-operator">=</span><span class="hljs-string">&quot;My journey with Vue&quot;</span> /&gt;<br>&lt;BlogPost title<span class="hljs-operator">=</span><span class="hljs-string">&quot;Blogging with Vue&quot;</span> /&gt;<br>&lt;BlogPost title<span class="hljs-operator">=</span><span class="hljs-string">&quot;Why Vue is so fun&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>在实际应用中，我们可能在父组件中会有如下的一个博客文章数组：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">export</span> <span class="hljs-title">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  data() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attribute">posts</span>: [<br>        &#123; <span class="hljs-attribute">id:</span><span class="hljs-string"> 1, title</span>: <span class="hljs-string">&#x27;My journey with Vue&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attribute">id:</span><span class="hljs-string"> 2, title</span>: <span class="hljs-string">&#x27;Blogging with Vue&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attribute">id:</span><span class="hljs-string"> 3, title</span>: <span class="hljs-string">&#x27;Why Vue is so fun&#x27;</span> &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种情况下，我们可以使用 <code>v-for</code> 来渲染它们：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;BlogPost<br>  <span class="hljs-attribute">v-for</span>=<span class="hljs-string">&quot;post in posts&quot;</span><br>  :<span class="hljs-attribute">key</span>=<span class="hljs-string">&quot;post.id&quot;</span><br>  :<span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;post.title&quot;</span><br> /&gt;<br></code></pre></td></tr></table></figure><h2 id="监听事件-1"><a href="#监听事件-1" class="headerlink" title="监听事件"></a>监听事件<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#listening-to-events"></a></h2><p>有时候子组件需要与父组件进行交互。例如，要在此处实现无障碍访问的需求，将博客文章的文字能够放大，而页面的其余部分仍使用默认字号。</p><p>在父组件中，我们可以添加一个 <code>postFontSize</code> 数据属性来实现这个效果：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>() &#123;</span><br><span class="hljs-class">  <span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class">    <span class="hljs-title">posts</span>: [</span><br><span class="hljs-class">      /* ... */</span><br><span class="hljs-class">    ],</span><br><span class="hljs-class">    <span class="hljs-title">postFontSize</span>: 1</span><br><span class="hljs-class">  &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在模板中用它来控制所有博客文章的字体大小：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">BlogPost</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;post in posts&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;post.id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;post.title&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">   /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后，给 <code>&lt;BlogPost&gt;</code> 组件添加一个按钮：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- BlogPost.vue, 省略了 &lt;script&gt; --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">title</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Enlarge text<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这个按钮目前还没有做任何事情，我们想要点击这个按钮来告诉父组件它应该放大所有博客文章的文字。要解决这个问题，组件实例提供了一个自定义事件系统。父组件可以通过 <code>v-on</code> 或 <code>@</code> 来选择性地监听子组件上抛的事件，就像监听原生 DOM 事件那样：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;BlogPost<br>  ...<br>  @enlarge-<span class="hljs-keyword">text</span>=<span class="hljs-string">&quot;postFontSize += 0.1&quot;</span><br> /&gt;<br></code></pre></td></tr></table></figure><p>子组件可以通过调用内置的 <a href="https://cn.vuejs.org/api/component-instance.html#emit"><strong>$emit</strong> 方法</a>，通过传入事件名称来抛出一个事件：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- BlogPost.vue, 省略了 &lt;script&gt; --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">title</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span>Enlarge text<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>因为有了 <code>@enlarge-text=&quot;postFontSize += 0.1&quot;</code> 的监听，父组件会接收这一事件，从而更新 <code>postFontSize</code> 的值。</p><p>我们可以通过 <a href="https://cn.vuejs.org/api/options-state.html#emits"><code>emits</code></a> 选项来声明需要抛出的事件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- BlogPost.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&#x27;enlarge-text&#x27;</span>]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这声明了一个组件可能触发的所有事件，还可以对事件的参数进行<a href="https://cn.vuejs.org/guide/components/events.html#validate-emitted-events">验证</a>。同时，这还可以让 Vue 避免将它们作为原生事件监听器隐式地应用于子组件的根元素。</p><h2 id="通过插槽来分配内容"><a href="#通过插槽来分配内容" class="headerlink" title="通过插槽来分配内容"></a>通过插槽来分配内容<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#content-distribution-with-slots"></a></h2><p>一些情况下我们会希望能和 HTML 元素一样向组件中传递内容：</p><p>这可以通过 Vue 的自定义 <code>&lt;slot&gt;</code> 元素来实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- AlertBox.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert-box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>This is an Error for Demo Purposes<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.alert-box</span> &#123;</span><br><span class="language-css">  <span class="hljs-comment">/* ... */</span></span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上所示，我们使用 <code>&lt;slot&gt;</code> 作为一个占位符，父组件传递进来的内容就会渲染在这里。</p><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件<a href="https://cn.vuejs.org/guide/essentials/component-basics.html#dynamic-components"></a></h2><p>有些场景会需要在两个组件间来回切换，比如 Tab 界面：</p><p>可以通过 Vue 的 <code>&lt;component&gt;</code> 元素和特殊的 <code>is</code> attribute 实现的：</p><p>template</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- currentTab 改变时组件也改变 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;currentTab&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的例子中，被传给 <code>:is</code> 的值可以是以下几种：</p><ul><li>被注册的组件名</li><li>导入的组件对象</li></ul><p>你也可以使用 <code>is</code> attribute 来创建一般的 HTML 元素。</p><p>当使用 <code>&lt;component :is=&quot;...&quot;&gt;</code> 来在多个组件间作切换时，被切换掉的组件会被卸载。我们可以通过 <a href="https://cn.vuejs.org/guide/built-ins/keep-alive.html"><code>&lt;keepAlive&gt;</code> 组件</a>强制被切换掉的组件仍然保持“存活”的状态。</p><h1 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册<a href="https://cn.vuejs.org/guide/components/registration.html#component-registration"></a></h1><p>一个 Vue 组件在使用前需要先被“注册”，这样 Vue 才能在渲染模板时找到其对应的实现。组件注册有两种方式：全局注册和局部注册。</p><h2 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册<a href="https://cn.vuejs.org/guide/components/registration.html#global-registration"></a></h2><p>我们可以使用 <a href="https://cn.vuejs.org/guide/essentials/application.html">Vue 应用实例</a>的 <code>.component()</code> 方法，让组件在当前 Vue 应用中全局可用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;&#125;)<br><br>app.<span class="hljs-title function_">component</span>(<br>  <span class="hljs-comment">// 注册的名字</span><br>  <span class="hljs-string">&#x27;MyComponent&#x27;</span>,<br>  <span class="hljs-comment">// 组件的实现</span><br>  &#123;<br>    <span class="hljs-comment">/* ... */</span><br>  &#125;<br>)<br></code></pre></td></tr></table></figure><p>如果使用<strong>单文件组件</strong>，你可以注册被导入的 <code>.vue</code> 文件：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> MyComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br>app.component(<span class="hljs-string">&#x27;MyComponent&#x27;</span>, MyComponent)<br></code></pre></td></tr></table></figure><p><code>.component()</code> 方法可以被链式调用：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">app<br>  <span class="hljs-selector-class">.component</span>(<span class="hljs-string">&#x27;ComponentA&#x27;</span>, ComponentA)<br>  <span class="hljs-selector-class">.component</span>(<span class="hljs-string">&#x27;ComponentB&#x27;</span>, ComponentB)<br>  <span class="hljs-selector-class">.component</span>(<span class="hljs-string">&#x27;ComponentC&#x27;</span>, ComponentC)<br></code></pre></td></tr></table></figure><p>全局注册的组件可以在此应用的任意组件的模板中使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这在当前应用的任意组件中都可用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ComponentA</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ComponentB</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ComponentC</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>所有的子组件也可以使用全局注册的组件，这意味着这三个组件也都可以在<em>彼此内部</em>使用。</p><h2 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册<a href="https://cn.vuejs.org/guide/components/registration.html#local-registration"></a></h2><p>全局注册虽然很方便，但有以下几个问题：</p><ol><li>全局注册，但并没有被使用的组件无法在生产打包时被自动移除 (也叫“tree-shaking”)。如果你全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。</li><li>全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。</li></ol><p>相比之下，局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。</p><p>局部注册需要使用 <code>components</code> 选项：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ComponentA</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ComponentA.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  components: &#123;</span><br><span class="hljs-template-variable">    ComponentA</span><br><span class="hljs-template-variable">  &#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ComponentA</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>对于每个 <code>components</code> 对象里的属性，它们的 key 名就是注册的组件名，而值就是相应组件的实现。上面的例子中使用的是 ES2015 的缩写语法，等价于：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts">export <span class="hljs-title class_">default</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">  components:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    ComponentA:</span> ComponentA<br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-comment">// ...</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>局部注册的组件在后代组件中不可用</strong>。在这个例子中，<code>ComponentA</code> 注册后仅在当前组件可用，而在任何的子组件或更深层的子组件中都不可用。</p><h1 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props<a href="https://cn.vuejs.org/guide/components/props.html#props"></a></h1><h2 id="Props-声明"><a href="#Props-声明" class="headerlink" title="Props 声明"></a>Props 声明<a href="https://cn.vuejs.org/guide/components/props.html#props-declaration"></a></h2><p>一个组件需要显式声明它所接受的 props，这样 Vue 才能知道外部传入的哪些是 props，哪些是透传 attribute 。</p><p>props 需要使用 <a href="https://cn.vuejs.org/api/options-state.html#props"><code>props</code></a> 选项来定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>],<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// props 会暴露到 `this` 上</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了使用字符串数组来声明 props 外，还可以使用对象的形式：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  props: &#123;<br>    title: <span class="hljs-built_in">String</span>,<br>    likes: <span class="hljs-built_in">Number</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于以对象形式声明的每个属性，key 是 prop 的名称，而值则是该 prop 预期类型的构造函数。比如，如果要求一个 prop 的值是 <code>number</code> 类型，则可使用 <code>Number</code> 构造函数作为其声明的值。</p><p>对象形式的 props 声明不仅可以一定程度上作为组件的文档，而且如果其他开发者在使用你的组件时传递了错误的类型，也会在浏览器控制台中抛出警告。</p><h2 id="传递-prop-的细节"><a href="#传递-prop-的细节" class="headerlink" title="传递 prop 的细节"></a>传递 prop 的细节<a href="https://cn.vuejs.org/guide/components/props.html#prop-passing-details"></a></h2><h3 id="Prop-名字格式"><a href="#Prop-名字格式" class="headerlink" title="Prop 名字格式"></a>Prop 名字格式<a href="https://cn.vuejs.org/guide/components/props.html#prop-name-casing"></a></h3><p>如果一个 prop 的名字很长，应使用 camelCase 形式，因为它们是合法的 JavaScript 标识符，可以直接在模板的表达式中使用，也可以避免在作为属性 key 名时必须加上引号。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  props: &#123;<br>    greetingMessage: <span class="hljs-type">String</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">greetingMessage</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>虽然理论上也可以在向子组件传递 props 时使用 camelCase 形式 (使用 <a href="https://cn.vuejs.org/guide/essentials/component-basics.html#in-dom-template-parsing-caveats">DOM 内模板</a>时例外)，但实际上为了和 HTML attribute 对齐，我们通常会将其写为 kebab-case 形式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;MyComponent greeting-message<span class="hljs-operator">=</span><span class="hljs-string">&quot;hello&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>对于组件名我们推荐使用 <a href="https://cn.vuejs.org/guide/components/registration.html#component-name-casing">PascalCase</a>，因为这提高了模板的可读性，能帮助我们区分 Vue 组件和原生 HTML 元素。然而对于传递 props 来说，使用 camelCase 并没有太多优势，因此我们推荐更贴近 HTML 的书写风格。</p><h3 id="使用一个对象绑定多个-prop"><a href="#使用一个对象绑定多个-prop" class="headerlink" title="使用一个对象绑定多个 prop"></a>使用一个对象绑定多个 prop<a href="https://cn.vuejs.org/guide/components/props.html#binding-multiple-properties-using-an-object"></a></h3><p>如果你想要将一个对象的所有属性都当作 props 传入，你可以使用<a href="https://cn.vuejs.org/guide/essentials/template-syntax.html#dynamically-binding-multiple-attributes">没有参数的 <code>v-bind</code></a>，即只使用 <code>v-bind</code> 而非 <code>:prop-name</code>。例如，这里有一个 <code>post</code> 对象：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">data</span>() &#123;</span><br><span class="hljs-class">    <span class="hljs-title">return</span> &#123;</span><br><span class="hljs-class">      <span class="hljs-title">post</span>: &#123;</span><br><span class="hljs-class">        <span class="hljs-title">id</span>: 1,</span><br><span class="hljs-class">        <span class="hljs-title">title</span>: &#x27;<span class="hljs-type">My</span> <span class="hljs-type">Journey</span> <span class="hljs-title">with</span> <span class="hljs-type">Vue</span>&#x27;</span><br><span class="hljs-class">      &#125;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以及下面的模板：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;BlogPost v-bind<span class="hljs-operator">=</span><span class="hljs-string">&quot;post&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>而这实际上等价于：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;<span class="hljs-title class_">BlogPost</span> <span class="hljs-symbol">:id=<span class="hljs-string">&quot;post.id&quot;</span></span> <span class="hljs-symbol">:title=<span class="hljs-string">&quot;post.title&quot;</span></span> /&gt;<br></code></pre></td></tr></table></figure><h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流<a href="https://cn.vuejs.org/guide/components/props.html#one-way-data-flow"></a></h2><p>所有的 props 都遵循着<strong>单向绑定</strong>原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。</p><p>另外，每次父组件更新后，所有的子组件中的 props 都会被更新到最新值，这意味着不应该**在子组件中去更改一个 prop。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>],<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ❌ 警告！prop 是只读的！</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;bar&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导致想要更改一个 prop 的需求通常来源于以下两种场景：</p><ol><li><p><strong>prop 被用于传入初始值；而子组件想在之后将其作为一个局部数据属性</strong>。在这种情况下，最好是新定义一个局部数据属性，从 props 上获取初始值即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;initialCounter&#x27;</span>],<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-comment">// 计数器只是将 this.initialCounter 作为初始值</span><br>      <span class="hljs-comment">// 像下面这样做就使 prop 和后续更新无关了</span><br>      <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">initialCounter</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>需要对传入的 prop 值做进一步的转换</strong>。在这种情况中，最好是基于该 prop 值定义一个计算属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;size&#x27;</span>],<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 该 prop 变更时计算属性也会自动更新</span><br>    <span class="hljs-title function_">normalizedSize</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">toLowerCase</span>()<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="更改对象-数组类型的-props"><a href="#更改对象-数组类型的-props" class="headerlink" title="更改对象 &#x2F; 数组类型的 props"></a>更改对象 &#x2F; 数组类型的 props<a href="https://cn.vuejs.org/guide/components/props.html#mutating-object-array-props"></a></h3><p>当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然<strong>可以</strong>更改对象或数组内部的值。这是因为 JavaScript 的对象和数组是按引用传递，对 Vue 来说，阻止这种更改需要付出的代价异常昂贵。</p><p>这种更改的主要缺陷是它允许了<strong>子组件以某种不明显的方式影响父组件的状态</strong>，可能会使数据流在将来变得更难以理解。在最佳实践中，应该尽可能避免这样的更改，除非父子组件在设计上本来就需要紧密耦合。在大多数场景下，子组件应该<a href="https://cn.vuejs.org/guide/components/events.html">抛出一个事件</a>来通知父组件做出改变。</p><h2 id="Prop-校验"><a href="#Prop-校验" class="headerlink" title="Prop 校验"></a>Prop 校验<a href="https://cn.vuejs.org/guide/components/props.html#prop-validation"></a></h2><p>Vue 组件可以更细致地声明对传入的 props 的校验要求。比如我们上面已经看到过的类型声明，如果传入的值不满足类型要求，Vue 会在浏览器控制台中抛出警告来提醒使用者。这在开发给其他开发者使用的组件时非常有用。</p><p>一些补充细节：</p><ul><li>所有 prop 默认都是可选的，除非声明了 <code>required: true</code>。</li><li>除 <code>Boolean</code> 外的未传递的可选 prop 将会有一个**默认值 <code>undefined</code>**。</li><li><code>Boolean</code> 类型的未传递 prop 将被转换为 <code>false</code>。这可以通过为它设置 <code>default</code> 来更改——例如：设置为 <code>default: undefined</code> 将与非布尔类型的 prop 的行为保持一致。</li><li>如果声明了 <code>default</code> 值，那么在 prop 的值被解析为 <code>undefined</code> 时，无论 prop 是未被传递还是显式指明的 <code>undefined</code>，都会改为 <code>default</code> 值。</li></ul><p>当 prop 的校验失败后，Vue 会抛出一个控制台警告 (在开发模式下)。</p><h1 id="组件事件"><a href="#组件事件" class="headerlink" title="组件事件"></a>组件事件<a href="https://cn.vuejs.org/guide/components/events.html#component-events"></a></h1><h2 id="触发与监听事件"><a href="#触发与监听事件" class="headerlink" title="触发与监听事件"></a>触发与监听事件<a href="https://cn.vuejs.org/guide/components/events.html#emitting-and-listening-to-events"></a></h2><p>在组件的模板表达式中，可以直接使用 <code>$emit</code> 方法触发自定义事件 (例如：在 <code>v-on</code> 的处理函数中)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MyComponent --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;someEvent&#x27;)&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>$emit()</code> 方法在组件实例上也同样以 <code>this.$emit()</code> 的形式可用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">submit</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;someEvent&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>父组件可以通过 <code>v-on</code> (缩写为 <code>@</code>) 来监听事件：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;MyComponent @some-<span class="hljs-keyword">event</span>=<span class="hljs-string">&quot;callback&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>同样，组件的事件监听器也支持 <code>.once</code> 修饰符：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;MyComponent @some-<span class="hljs-keyword">event</span>.once=<span class="hljs-string">&quot;callback&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>像组件与 prop 一样，事件的名字也提供了自动的格式转换。注意这里我们触发了一个以 camelCase 形式命名的事件，但在父组件中可以使用 kebab-case 形式来监听。与 <a href="https://cn.vuejs.org/guide/components/props.html#prop-name-casing">prop 大小写格式</a>一样，在模板中我们也推荐使用 kebab-case 形式来编写监听器。</p><p>和原生 DOM 事件不一样，组件触发的事件<strong>没有冒泡机制</strong>。你只能监听直接子组件触发的事件。平级组件或是跨越多层嵌套的组件间通信，应使用一个外部的事件总线，或是使用一个<a href="https://cn.vuejs.org/guide/scaling-up/state-management.html">全局状态管理方案</a>。</p><h2 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数<a href="https://cn.vuejs.org/guide/components/events.html#event-arguments"></a></h2><p>有时候我们会需要在触发事件时附带一个特定的值。举例来说，我们想要 <code>&lt;BlogPost&gt;</code> 组件来管理文本会缩放得多大。在这个场景下，我们可以给 <code>$emit</code> 提供一个额外的参数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$emit</span>(&#x27;increaseBy&#x27;, 1)&quot;</span>&gt;<br>  Increase <span class="hljs-keyword">by</span> <span class="hljs-number">1</span><br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>然后我们在父组件中监听事件，我们可以先简单写一个内联的箭头函数作为监听器，此函数会接收到事件附带的参数：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">&lt;MyButton <span class="hljs-meta">@increase</span>-<span class="hljs-meta">by</span>=<span class="hljs-string">&quot;(n) =&gt; count += n&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>或者，也可以用一个组件方法来作为事件处理函数：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">&lt;MyButton <span class="hljs-meta">@increase</span>-<span class="hljs-meta">by</span>=<span class="hljs-string">&quot;increaseCount&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>该方法也会接收到事件所传递的参数：</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">methods</span>: &#123;<br>  <span class="hljs-title function_">increaseCount</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-variable">n</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="声明触发的事件"><a href="#声明触发的事件" class="headerlink" title="声明触发的事件"></a>声明触发的事件<a href="https://cn.vuejs.org/guide/components/events.html#declaring-emitted-events"></a></h2><p>组件可以显式地通过 <a href="https://cn.vuejs.org/api/options-state.html#emits"><code>emits</code></a> 选项来声明它要触发的事件：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span><span class="hljs-built_in"> default </span>&#123;<br>  emits: [<span class="hljs-string">&#x27;inFocus&#x27;</span>, <span class="hljs-string">&#x27;submit&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 <code>emits</code> 选项和 <code>defineEmits()</code> 宏还支持对象语法。通过 TypeScript 为参数指定类型，它允许我们对触发事件的参数进行验证：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">emits</span>: &#123;<br>    <span class="hljs-title function_">submit</span>(<span class="hljs-params"><span class="hljs-attr">payload</span>: &#123; email: <span class="hljs-built_in">string</span>, password: <span class="hljs-built_in">string</span> &#125;</span>) &#123;<br>      <span class="hljs-comment">// 通过返回值为 `true` 还是为 `false` 来判断</span><br>      <span class="hljs-comment">// 验证是否通过</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="组件-v-model"><a href="#组件-v-model" class="headerlink" title="组件 v-model"></a>组件 v-model<a href="https://cn.vuejs.org/guide/components/v-model.html#component-v-model"></a></h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法<a href="https://cn.vuejs.org/guide/components/v-model.html#basic-usage"></a></h2><p><code>v-model</code> 可以在组件上使用以实现双向绑定。</p><p>首先让我们回忆一下 <code>v-model</code> 在原生元素上的用法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input v-model<span class="hljs-operator">=</span><span class="hljs-string">&quot;searchText&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>在代码背后，模板编译器会对 <code>v-model</code> 进行更冗长的等价展开。因此上面的代码其实等价于下面这段：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input<br>  :<span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;searchText&quot;</span><br>  @<span class="hljs-attribute">input</span>=<span class="hljs-string">&quot;searchText = <span class="hljs-variable">$event</span>.target.value&quot;</span><br>/&gt;<br></code></pre></td></tr></table></figure><p>而当使用在一个组件上时，<code>v-model</code> 会被展开为如下的形式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;<span class="hljs-title class_">CustomInput</span><br>  <span class="hljs-symbol">:model-value=<span class="hljs-string">&quot;searchText&quot;</span></span><br>  <span class="hljs-variable">@update</span><span class="hljs-symbol">:model-value=<span class="hljs-string">&quot;newValue =&gt; searchText = newValue&quot;</span></span><br>/&gt;<br></code></pre></td></tr></table></figure><p>要让这个例子实际工作起来，<code>&lt;CustomInput&gt;</code> 组件内部需要做两件事：</p><ol><li>将内部原生 <code>&lt;input&gt;</code> 元素的 <code>value</code> attribute 绑定到 <code>modelValue</code> prop</li><li>当原生的 <code>input</code> 事件触发时，触发一个携带了新值的 <code>update:modelValue</code> 自定义事件</li></ol><p>这里是相应的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- CustomInput.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;modelValue&#x27;</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&#x27;update:modelValue&#x27;</span>]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;modelValue&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在 <code>v-model</code> 可以在这个组件上正常工作了：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;CustomInput v-model<span class="hljs-operator">=</span><span class="hljs-string">&quot;searchText&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>另一种在组件内实现 <code>v-model</code> 的方式是使用一个可写的，同时具有 getter 和 setter 的 <code>computed</code> 属性。<code>get</code> 方法需返回 <code>modelValue</code> prop，而 <code>set</code> 方法需触发相应的事件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- CustomInput.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;modelValue&#x27;</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&#x27;update:modelValue&#x27;</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">value</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">modelValue</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, value)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-model-的参数"><a href="#v-model-的参数" class="headerlink" title="v-model 的参数"></a><code>v-model</code> 的参数<a href="https://cn.vuejs.org/guide/components/v-model#v-model-arguments"></a></h2><p>组件上的 <code>v-model</code> 也可以接受一个参数：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">&lt;MyComponent v-<span class="hljs-keyword">mode</span><span class="hljs-variable">l:title</span>=<span class="hljs-string">&quot;bookTitle&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>在这种情况下，子组件应该使用 <code>title</code> prop 和 <code>update:title</code> 事件来更新父组件的值，而非默认的 <code>modelValue</code> prop 和 <code>update:modelValue</code> 事件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MyComponent.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>],</span><br><span class="language-javascript">  <span class="hljs-attr">emits</span>: [<span class="hljs-string">&#x27;update:title&#x27;</span>]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;title&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;update:title&#x27;, $event.target.value)&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="透传-Attributes"><a href="#透传-Attributes" class="headerlink" title="透传 Attributes"></a>透传 Attributes<a href="https://cn.vuejs.org/guide/components/attrs.html#fallthrough-attributes"></a></h1><h2 id="Attributes-继承"><a href="#Attributes-继承" class="headerlink" title="Attributes 继承"></a>Attributes 继承<a href="https://cn.vuejs.org/guide/components/attrs.html#attribute-inheritance"></a></h2><p>“透传 attribute”指的是传递给一个组件，<strong>却没有被该组件声明为 <a href="https://cn.vuejs.org/guide/components/props.html">props</a> 或 <a href="https://cn.vuejs.org/guide/components/events.html#defining-custom-events">emits</a> 的 attribute 或者 <code>v-on</code> 事件监听器</strong>。最常见的例子就是 <code>class</code>、<code>style</code> 和 <code>id</code>。</p><p>当一个组件以单个元素为根作渲染时，透传的 attribute 会自动被添加到根元素上。举例来说，假如我们有一个 <code>&lt;MyButton&gt;</code> 组件，它的模板长这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;MyButton&gt; 的模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一个父组件使用了这个组件，并且传入了 <code>class</code>：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;MyButton class<span class="hljs-operator">=</span><span class="hljs-string">&quot;large&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>最后渲染出的 DOM 结果是：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;button <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">large</span>&quot;&gt;<span class="hljs-symbol">Click</span> <span class="hljs-symbol">Me</span>&lt;/<span class="hljs-symbol">button</span>&gt;<br></code></pre></td></tr></table></figure><p>这里，<code>&lt;MyButton&gt;</code> 并没有将 <code>class</code> 声明为一个它所接受的 prop，所以 <code>class</code> 被视作透传 attribute，自动透传到了 <code>&lt;MyButton&gt;</code> 的根元素上。</p><h3 id="对-class-和-style-的合并"><a href="#对-class-和-style-的合并" class="headerlink" title="对 class 和 style 的合并"></a>对 <code>class</code> 和 <code>style</code> 的合并<a href="https://cn.vuejs.org/guide/components/attrs.html#class-and-style-merging"></a></h3><p>如果一个子组件的根元素已经有了 <code>class</code> 或 <code>style</code> attribute，它会和从父组件上继承的值合并。如果我们将之前的 <code>&lt;MyButton&gt;</code> 组件的模板改成这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;MyButton&gt; 的模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>则最后渲染出的 DOM 结果会变成：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;button <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">btn</span> <span class="hljs-symbol">large</span>&quot;&gt;<span class="hljs-symbol">Click</span> <span class="hljs-symbol">Me</span>&lt;/<span class="hljs-symbol">button</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="v-on-监听器继承"><a href="#v-on-监听器继承" class="headerlink" title="v-on 监听器继承"></a><code>v-on</code> 监听器继承<a href="https://cn.vuejs.org/guide/components/attrs.html#v-on-listener-inheritance"></a></h3><p>同样的规则也适用于 <code>v-on</code> 事件监听器：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;MyButton @click=<span class="hljs-string">&quot;onClick&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><code>click</code> 监听器会被添加到 <code>&lt;MyButton&gt;</code> 的根元素，即那个原生的 <code>&lt;button&gt;</code> 元素之上。当原生的 <code>&lt;button&gt;</code> 被点击，会触发父组件的 <code>onClick</code> 方法。同样的，如果原生 <code>button</code> 元素自身也通过 <code>v-on</code> 绑定了一个事件监听器，则这个监听器和从父组件继承的监听器都会被触发。</p><h2 id="禁用-Attributes-继承"><a href="#禁用-Attributes-继承" class="headerlink" title="禁用 Attributes 继承"></a>禁用 Attributes 继承<a href="https://cn.vuejs.org/guide/components/attrs.html#disabling-attribute-inheritance"></a></h2><p>如果<strong>不想要</strong>一个组件自动地继承 attribute，可以在组件选项中设置 <code>inheritAttrs: false</code>。</p><p>最常见的需要禁用 attribute 继承的场景就是 attribute 需要应用在根节点以外的其他元素上。通过设置 <code>inheritAttrs</code> 选项为 <code>false</code>，可以完全控制透传进来的 attribute 被如何使用。</p><p>这些透传进来的 attribute 可以在模板的表达式中直接用 <code>$attrs</code> 访问到。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fallthrough attribute: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$attrs</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这个 <code>$attrs</code> 对象包含了除组件所声明的 <code>props</code> 和 <code>emits</code> 之外的所有其他 attribute，例如 <code>class</code>，<code>style</code>，<code>v-on</code> 监听器等等。</p><p>有几点需要注意：</p><ul><li>和 props 有所不同，透传 attributes 在 JavaScript 中保留了它们原始的大小写，所以像 <code>foo-bar</code> 这样的一个 attribute 需要通过 <code>$attrs[&#39;foo-bar&#39;]</code> 来访问。</li><li>像 <code>@click</code> 这样的一个 <code>v-on</code> 事件监听器将在此对象下被暴露为一个函数 <code>$attrs.onClick</code>。</li></ul><p>再次使用一下<a href="https://cn.vuejs.org/guide/components/attrs.html#attribute-inheritance">之前小节</a>中的 <code>&lt;MyButton&gt;</code> 组件例子。有时候我们可能为了样式，需要在 <code>&lt;button&gt;</code> 元素外包装一层 <code>&lt;div&gt;</code>：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;btn-wrapper&quot;</span>&gt;<br>  &lt;button <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;Click Me&lt;/button&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>我们想要所有像 <code>class</code> 和 <code>v-on</code> 监听器这样的透传 attribute 都应用在内部的 <code>&lt;button&gt;</code> 上而不是外层的 <code>&lt;div&gt;</code> 上。我们可以通过设定 <code>inheritAttrs: false</code> 和使用 <code>v-bind=&quot;$attrs&quot;</code> 来实现：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;btn-wrapper&quot;</span>&gt;<br>  &lt;button <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;btn&quot;</span> v-bind=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;Click Me&lt;/button&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>小提示：<a href="https://cn.vuejs.org/guide/essentials/template-syntax.html#dynamically-binding-multiple-attributes">没有参数的 <code>v-bind</code></a> 会将一个对象的所有属性都作为 attribute 应用到目标元素上。</p><h1 id="插槽-Slots"><a href="#插槽-Slots" class="headerlink" title="插槽 Slots"></a>插槽 Slots<a href="https://cn.vuejs.org/guide/components/slots.html#slots"></a></h1><h2 id="插槽内容与出口"><a href="#插槽内容与出口" class="headerlink" title="插槽内容与出口"></a>插槽内容与出口<a href="https://cn.vuejs.org/guide/components/slots.html#slot-content-and-outlet"></a></h2><p>在之前的章节中，我们已经了解到组件能够接收任意类型的 JavaScript 值作为 props，但组件要如何接收模板内容呢？在某些场景中，我们可能想要为<strong>子组件传递一些模板片段</strong>，让子组件在它们的组件中渲染这些片段。</p><p>举例来说，这里有一个 <code>&lt;FancyButton&gt;</code> 组件，可以像这样使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FancyButton</span>&gt;</span><br>  Click me! <span class="hljs-comment">&lt;!-- 插槽内容 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">FancyButton</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而 <code>&lt;FancyButton&gt;</code> 的模板是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fancy-btn&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span> <span class="hljs-comment">&lt;!-- 插槽出口 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;slot&gt;</code> 元素是一个<strong>插槽出口</strong> (slot outlet)，标示了父元素提供的<strong>插槽内容</strong> (slot content) 将在哪里被渲染。</p><p><img src="https://cn.vuejs.org/assets/slots.CKcE8XYd.png" alt="插槽图示"></p><p>最终渲染出的 DOM 是这样：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;button <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;fancy-btn&quot;</span>&gt;Click <span class="hljs-keyword">me</span>!&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>通过使用插槽，<code>&lt;FancyButton&gt;</code> 仅负责渲染外层的 <code>&lt;button&gt;</code> (以及相应的样式)，而其内部的内容由父组件提供。</p><p>理解插槽的另一种方式是和下面的 JavaScript 函数作类比，其概念是类似的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 父元素传入插槽内容</span><br><span class="hljs-function"><span class="hljs-title">FancyButton</span><span class="hljs-params">(<span class="hljs-string">&#x27;Click me!&#x27;</span>)</span></span><br><br><span class="hljs-comment">// FancyButton 在自己的模板中渲染插槽内容</span><br>function <span class="hljs-built_in">FancyButton</span>(slotContent) &#123;<br>  return `&lt;<span class="hljs-selector-tag">button</span> class=<span class="hljs-string">&quot;fancy-btn&quot;</span>&gt;<br>      $&#123;slotContent&#125;<br>    &lt;/button&gt;`<br>&#125;<br></code></pre></td></tr></table></figure><p>插槽内容可以是任意合法的模板内容，不局限于文本。例如我们可以传入多个元素，甚至是组件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FancyButton</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>Click me!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">AwesomeIcon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;plus&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">FancyButton</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过使用插槽，<code>&lt;FancyButton&gt;</code> 组件更加灵活和具有可复用性。现在组件可以用在不同的地方渲染各异的内容，但同时还保证都具有相同的样式。</p><h2 id="渲染作用域"><a href="#渲染作用域" class="headerlink" title="渲染作用域"></a>渲染作用域<a href="https://cn.vuejs.org/guide/components/slots.html#render-scope"></a></h2><p>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。举例来说：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FancyButton</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">FancyButton</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这里的两个 <code>&#123;&#123; message &#125;&#125;</code> 插值表达式渲染的内容都是一样的。</p><p>插槽内容<strong>无法访问</strong>子组件的数据。<strong>Vue 模板中的表达式只能访问其定义时所处的作用域</strong>，这和 JavaScript 的词法作用域规则是一致的。换言之：</p><p>父组件模板中的表达式只能访问父组件的作用域；子组件模板中的表达式只能访问子组件的作用域。</p><h2 id="默认内容"><a href="#默认内容" class="headerlink" title="默认内容"></a>默认内容<a href="https://cn.vuejs.org/guide/components/slots.html#fallback-content"></a></h2><p>在外部没有提供任何内容的情况下，可以为插槽指定默认内容。比如有这样一个 <code>&lt;SubmitButton&gt;</code> 组件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果我们想在父组件没有提供任何插槽内容时在 <code>&lt;button&gt;</code> 内渲染“Submit”，只需要将“Submit”写在 <code>&lt;slot&gt;</code> 标签之间来作为默认内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><br>    Submit <span class="hljs-comment">&lt;!-- 默认内容 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在，当我们在父组件中使用 <code>&lt;SubmitButton&gt;</code> 且没有提供任何插槽内容时：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;SubmitButton /&gt;</span><br></code></pre></td></tr></table></figure><p>“Submit”将会被作为默认内容渲染：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但如果我们提供了插槽内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">SubmitButton</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">SubmitButton</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么被显式提供的内容会取代默认内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽<a href="https://cn.vuejs.org/guide/components/slots.html#named-slots"></a></h2><p>有时在一个组件中包含多个插槽出口是很有用的。举例来说，在一个 <code>&lt;BaseLayout&gt;</code> 组件中，有如下模板：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 标题内容放这里 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 主要内容放这里 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 底部内容放这里 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于这种场景，<code>&lt;slot&gt;</code> 元素可以有一个特殊的 attribute <code>name</code>，用来给各个插槽分配唯一的 ID，以确定每一处要渲染的内容：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">container</span>&quot;&gt;<br>  &lt;<span class="hljs-symbol">header</span>&gt;<br>    &lt;<span class="hljs-symbol">slot</span> <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">header</span>&quot;&gt;&lt;/<span class="hljs-symbol">slot</span>&gt;<br>  &lt;/<span class="hljs-symbol">header</span>&gt;<br>  &lt;<span class="hljs-symbol">main</span>&gt;<br>    &lt;<span class="hljs-symbol">slot</span>&gt;&lt;/<span class="hljs-symbol">slot</span>&gt;<br>  &lt;/<span class="hljs-symbol">main</span>&gt;<br>  &lt;<span class="hljs-symbol">footer</span>&gt;<br>    &lt;<span class="hljs-symbol">slot</span> <span class="hljs-symbol">name</span>=&quot;<span class="hljs-symbol">footer</span>&quot;&gt;&lt;/<span class="hljs-symbol">slot</span>&gt;<br>  &lt;/<span class="hljs-symbol">footer</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p>这类带 <code>name</code> 的插槽被称为具名插槽 (named slots)。没有提供 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会隐式地命名为“default”。</p><p>在父组件中使用 <code>&lt;BaseLayout&gt;</code> 时，我们需要一种方式将多个插槽内容传入到各自目标插槽的出口。此时就需要用到<strong>具名插槽</strong>了：</p><p>要为具名插槽传入内容，我们需要使用一个含 <code>v-slot</code> 指令的 <code>&lt;template&gt;</code> 元素，并将目标插槽的名字传给该指令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">BaseLayout</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- header 插槽的内容放这里 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BaseLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>v-slot</code> 有对应的简写 <code>#</code>，因此 <code>&lt;template v-slot:header&gt;</code> 可以简写为 <code>&lt;template #header&gt;</code>。其意思就是“将这部分模板片段传入子组件的 header 插槽中”。</p><p><img src="https://cn.vuejs.org/assets/named-slots.CCIb9Mo_.png" alt="具名插槽图示"></p><p>下面我们给出完整的、向 <code>&lt;BaseLayout&gt;</code> 传递插槽内容的代码，指令均使用的是缩写形式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">BaseLayout</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BaseLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当一个组件同时接收默认插槽和具名插槽时，所有位于顶级的非 <code>&lt;template&gt;</code> 节点都被隐式地视为默认插槽的内容。所以上面也可以写成：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">BaseLayout</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 隐式的默认插槽 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">BaseLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在 <code>&lt;template&gt;</code> 元素中的所有内容都将被传递到相应的插槽。最终渲染出的 HTML 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽<a href="https://cn.vuejs.org/guide/components/slots.html#scoped-slots"></a></h2><p>在上面的<a href="https://cn.vuejs.org/guide/components/slots.html#render-scope">渲染作用域</a>中，插槽的内容无法访问到子组件的状态。</p><p>然而在某些场景下插槽的内容可能想要同时使用父组件域内和子组件域内的数据。要做到这一点，我们需要一种方法来让子组件在渲染时将一部分数据提供给插槽。</p><p>可以像对组件传递 props 那样，向一个插槽的出口上传递 attributes：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;MyComponent&gt; 的模板 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:text</span>=<span class="hljs-string">&quot;greetingMessage&quot;</span> <span class="hljs-attr">:count</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当需要接收插槽 props 时，默认插槽和具名插槽的使用方式有一些小区别。下面我们将先展示默认插槽如何接受 props，通过子组件标签上的 <code>v-slot</code> 指令，直接接收到了一个插槽 props 对象：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">slotProps.text</span> &#125;&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">slotProps.count</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">MyComponent</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cn.vuejs.org/assets/scoped-slots.B67tIPc5.svg" alt="scoped slots diagram"></p><p>子组件传入插槽的 props 作为了 <code>v-slot</code> 指令的值，可以在插槽内的表达式中访问。</p><p>你可以将作用域插槽类比为一个传入子组件的函数。子组件会将相应的 props 作为参数传给它：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade">MyComponent(&#123;<br>  <span class="hljs-comment">// 类比默认插槽，将其想成一个函数</span><br>  default: <span class="hljs-function">(<span class="hljs-params">slotProps</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;slotProps.<span class="hljs-built_in">text</span>&#125;</span> <span class="hljs-subst">$&#123;slotProps.<span class="hljs-built_in">count</span>&#125;</span>`</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params">slots</span>) &#123;<br>  const greetingMessage = <span class="hljs-string">&#x27;hello&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div&gt;<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">    <span class="hljs-regexp">//</span> 在插槽函数调用时传入 props</span></span><br><span class="hljs-subst"><span class="hljs-string">    slots.default(&#123; <span class="hljs-built_in">text</span>: greetingMessage, <span class="hljs-built_in">count</span>: <span class="hljs-number">1</span> &#125;</span>)</span><br><span class="hljs-string">  &#125;&lt;/div&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>实际上，这已经和作用域插槽的最终代码编译结果、以及手动编写<a href="https://cn.vuejs.org/guide/extras/render-function.html">渲染函数</a>时使用作用域插槽的方式非常类似了。</p><p><code>v-slot=&quot;slotProps&quot;</code> 可以类比这里的函数签名，和函数的参数类似，我们也可以在 <code>v-slot</code> 中使用解构：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; text, count &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">text</span> &#125;&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">count</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">MyComponent</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="具名作用域插槽"><a href="#具名作用域插槽" class="headerlink" title="具名作用域插槽"></a>具名作用域插槽<a href="https://cn.vuejs.org/guide/components/slots.html#named-scoped-slots"></a></h3><p>具名作用域插槽的工作方式也是类似的，插槽 props 可以作为 <code>v-slot</code> 指令的值被访问到：<code>v-slot:name=&quot;slotProps&quot;</code>。当使用缩写时是这样：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>=<span class="hljs-string">&quot;headerProps&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">headerProps</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;defaultProps&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">defaultProps</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>=<span class="hljs-string">&quot;footerProps&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">footerProps</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">MyComponent</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>向具名插槽中传入 props：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;slot <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attribute">message</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;&lt;/slot&gt;<br></code></pre></td></tr></table></figure><p>注意插槽上的 <code>name</code> 是一个 Vue 特别保留的 attribute，不会作为 props 传递给插槽。因此最终 <code>headerProps</code> 的结果是 <code>&#123; message: &#39;hello&#39; &#125;</code>。</p><p>如果你同时使用了具名插槽与默认插槽，则需要为默认插槽使用<strong>显式的 <code>&lt;template&gt;</code></strong> 标签。尝试直接为组件添加 <code>v-slot</code> 指令将导致编译错误。这是为了避免因默认插槽的 props 的作用域而困惑。举例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;MyComponent&gt; template --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:message</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- 该模板无法编译 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; message &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- message 属于默认插槽，此处不可用 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">MyComponent</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>为默认插槽使用显式的 <code>&lt;template&gt;</code> 标签有助于更清晰地指出 <code>message</code> 属性在其他插槽中不可用：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 使用显式的默认插槽 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;&#123; message &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">MyComponent</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入<a href="https://cn.vuejs.org/guide/components/provide-inject.html#provide-inject"></a></h1><h2 id="Prop-逐级透传问题"><a href="#Prop-逐级透传问题" class="headerlink" title="Prop 逐级透传问题"></a>Prop 逐级透传问题<a href="https://cn.vuejs.org/guide/components/provide-inject.html#prop-drilling"></a></h2><p>通常情况下，当我们需要从父组件向子组件传递数据时，会使用 <a href="https://cn.vuejs.org/guide/components/props.html">props</a>。想象一下这样的结构：有一些多层级嵌套的组件，形成了一棵巨大的组件树，而某个深层的子组件需要一个较远的祖先组件中的部分数据。在这种情况下，如果仅使用 props 则必须将其沿着组件链逐级传递下去，这会非常麻烦：</p><p><img src="https://cn.vuejs.org/assets/prop-drilling.XJXa8UE-.png" alt="Prop 逐级透传的过程图示"></p><p>注意，虽然这里的 <code>&lt;Footer&gt;</code> 组件可能根本不关心这些 props，但为了使 <code>&lt;DeepChild&gt;</code> 能访问到它们，仍然需要定义并向下传递。如果组件链路非常长，可能会影响到更多这条路上的组件。这一问题被称为“prop 逐级透传”，显然是我们希望尽量避免的情况。</p><p><code>provide</code> 和 <code>inject</code> 可以帮助我们解决这一问题 [<a href="https://cn.vuejs.org/guide/components/provide-inject.html#footnote-1">1]</a>。一个父组件相对于其所有的后代组件，会作为<strong>依赖提供者</strong>。任何后代的组件树，无论层级有多深，都可以<strong>注入</strong>由父组件提供给整条链路的依赖。</p><p><img src="https://cn.vuejs.org/assets/provide-inject.C0gAIfVn.png" alt="Provide/inject 模式"></p><h2 id="Provide-提供"><a href="#Provide-提供" class="headerlink" title="Provide (提供)"></a>Provide (提供)<a href="https://cn.vuejs.org/guide/components/provide-inject.html#provide"></a></h2><p>要为组件后代提供数据，需要使用到 <a href="https://cn.vuejs.org/api/options-composition.html#provide"><code>provide</code></a> 选项：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span><span class="hljs-built_in"> default </span>&#123;<br>  provide: &#123;<br>    message: <span class="hljs-string">&#x27;hello!&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于 <code>provide</code> 对象上的每一个属性，后代组件会用其 key 为注入名查找期望注入的值，属性的值就是要提供的数据。</p><p>如果我们需要提供依赖当前组件实例的状态 (比如那些由 <code>data()</code> 定义的数据属性)，那么可以以函数形式使用 <code>provide</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello!&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 使用函数的形式，可以访问到 `this`</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而，请注意这<strong>不会</strong>使注入保持响应性。</p><h1 id="组合式函数"><a href="#组合式函数" class="headerlink" title="组合式函数"></a>组合式函数<a href="https://cn.vuejs.org/guide/reusability/composables.html#composables"></a></h1><h2 id="什么是“组合式函数”？"><a href="#什么是“组合式函数”？" class="headerlink" title="什么是“组合式函数”？"></a>什么是“组合式函数”？<a href="https://cn.vuejs.org/guide/reusability/composables.html#what-is-a-composable"></a></h2><p>在 Vue 应用的概念中，“组合式函数”(Composables) 是一个利用 Vue 的组合式 API 来封装和复用<strong>有状态逻辑</strong>的函数。</p><p>当构建前端应用时，我们常常需要复用公共任务的逻辑。例如为了在不同地方格式化时间，我们可能会抽取一个可复用的日期格式化函数。这个函数封装了<strong>无状态的逻辑</strong>：它在接收一些输入后立刻返回所期望的输出。复用无状态逻辑的库有很多，比如你可能已经用过的 <a href="https://lodash.com/">lodash</a> 或是 <a href="https://date-fns.org/">date-fns</a>。</p><p>相比之下，有状态逻辑负责管理会随时间而变化的状态。一个简单的例子是跟踪当前鼠标在页面中的位置。在实际应用中，也可能是像触摸手势或与数据库的连接状态这样的更复杂的逻辑。</p><h2 id="鼠标跟踪器示例"><a href="#鼠标跟踪器示例" class="headerlink" title="鼠标跟踪器示例"></a>鼠标跟踪器示例<a href="https://cn.vuejs.org/guide/reusability/composables.html#mouse-tracker-example"></a></h2><p>如果我们要直接在组件中使用组合式 API 实现鼠标跟踪功能，它会是这样的：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> x = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> y = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  x.<span class="hljs-property">value</span> = event.<span class="hljs-property">pageX</span></span></span><br><span class="language-javascript"><span class="language-xml">  y.<span class="hljs-property">value</span> = event.<span class="hljs-property">pageY</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, update))</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, update))</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>Mouse position is at: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">x</span> &#125;&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">y</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>但是，如果我们想在多个组件中复用这个相同的逻辑呢？我们可以把这个逻辑以一个组合式函数的形式提取到外部文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// mouse.js</span><br><span class="hljs-keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 按照惯例，组合式函数名以“use”开头</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useMouse</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 被组合式函数封装和管理的状态</span><br>  <span class="hljs-keyword">const</span> x = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> y = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-comment">// 组合式函数可以随时更改其状态。</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">event</span>) &#123;<br>    x.<span class="hljs-property">value</span> = event.<span class="hljs-property">pageX</span><br>    y.<span class="hljs-property">value</span> = event.<span class="hljs-property">pageY</span><br>  &#125;<br><br>  <span class="hljs-comment">// 一个组合式函数也可以挂靠在所属组件的生命周期上</span><br>  <span class="hljs-comment">// 来启动和卸载副作用</span><br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, update))<br>  <span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, update))<br><br>  <span class="hljs-comment">// 通过返回值暴露所管理的状态</span><br>  <span class="hljs-keyword">return</span> &#123; x, y &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是它在组件中使用的方式：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useMouse &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./mouse.js&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> &#123; x, y &#125; = <span class="hljs-title function_">useMouse</span>()</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>Mouse position is at: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">x</span> &#125;&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">y</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html#single-file-components"></a></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html#introduction"></a></h2><p>Vue 的单文件组件 (即 <code>*.vue</code> 文件，英文 Single-File Component，简称 <strong>SFC</strong>) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中。下面是一个单文件组件的示例：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">greeting</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;greeting&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">greeting</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.greeting</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: red;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">font-weight</span>: bold;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>Vue 的单文件组件是网页开发中 HTML、CSS 和 JavaScript 三种语言经典组合的自然延伸。<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三个块在同一个文件中封装、组合了组件的视图、逻辑和样式。完整的语法定义可以查阅<a href="https://cn.vuejs.org/api/sfc-spec.html">单文件组件语法说明</a>。</p><h2 id="为什么要使用单文件组件"><a href="#为什么要使用单文件组件" class="headerlink" title="为什么要使用单文件组件"></a>为什么要使用单文件组件<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html#why-sfc"></a></h2><p>使用单文件组件必须使用构建工具，但作为回报带来了以下优点：</p><ul><li>使用熟悉的 HTML、CSS 和 JavaScript 语法编写模块化的组件</li><li><a href="https://cn.vuejs.org/guide/scaling-up/sfc.html#what-about-separation-of-concerns">让本来就强相关的关注点自然内聚</a></li><li>预编译模板，避免运行时的编译开销</li><li><a href="https://cn.vuejs.org/api/sfc-css-features.html">组件作用域的 CSS</a></li><li><a href="https://cn.vuejs.org/api/sfc-script-setup.html">在使用组合式 API 时语法更简单</a></li><li>通过交叉分析模板和逻辑代码能进行更多编译时优化</li><li><a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#ide-support">更好的 IDE 支持</a>，提供自动补全和对模板中表达式的类型检查</li><li>开箱即用的模块热更新 (HMR) 支持</li></ul><p>单文件组件是 Vue 框架提供的一个功能，并且在下列场景中都是官方推荐的项目组织方式：</p><ul><li>单页面应用 (SPA)</li><li>静态站点生成 (SSG)</li><li>任何值得引入构建步骤以获得更好的开发体验 (DX) 的项目</li></ul><p>当然，在一些轻量级场景下使用单文件组件会显得有些杀鸡用牛刀。因此 Vue 同样也可以在无构建步骤的情况下以纯 JavaScript 方式使用。</p><h2 id="单文件组件是如何工作的"><a href="#单文件组件是如何工作的" class="headerlink" title="单文件组件是如何工作的"></a>单文件组件是如何工作的<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html#how-it-works"></a></h2><p>Vue 单文件组件是一个框架指定的文件格式，因此必须交由 <a href="https://github.com/vuejs/core/tree/main/packages/compiler-sfc">@vue&#x2F;compiler-sfc</a> 编译为标准的 JavaScript 和 CSS，一个编译后的单文件组件是一个标准的 JavaScript(ES) 模块，这也意味着在构建配置正确的前提下，你可以像导入其他 ES 模块一样导入单文件组件：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> MyComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./MyComponent.vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  components: &#123;<br>    MyComponent<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>单文件组件中的 <code>&lt;style&gt;</code> 标签一般会在开发时注入成原生的 <code>&lt;style&gt;</code> 标签以支持热更新，而生产环境下它们会被抽取、合并成单独的 CSS 文件。</p><h1 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h1><h2 id="项目脚手架"><a href="#项目脚手架" class="headerlink" title="项目脚手架"></a>项目脚手架<a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#project-scaffolding"></a></h2><h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite<a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#vite"></a></h3><p><a href="https://cn.vitejs.dev/">Vite</a> 是一个轻量级的、速度极快的构建工具，对 Vue 单文件组件提供第一优先级支持。</p><p>要使用 Vite 来创建一个 Vue 项目，非常简单：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> create vue@latest<br></code></pre></td></tr></table></figure><p>这个命令会安装和执行 <a href="https://github.com/vuejs/create-vue">create-vue</a>，它是 Vue 提供的官方脚手架工具。跟随命令行的提示继续操作即可。</p><ul><li>要学习更多关于 Vite 的知识，请查看 <a href="https://cn.vitejs.dev/">Vite 官方文档</a>。</li><li>若要了解如何为一个 Vite 项目配置 Vue 相关的特殊行为，比如向 Vue 编译器传递相关选项，请查看 <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#readme">@vitejs&#x2F;plugin-vue</a> 的文档。</li></ul><p>上面提到的两种在线演练场也支持将文件作为一个 Vite 项目下载。</p><h3 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI<a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#vue-cli"></a></h3><p><a href="https://cli.vuejs.org/zh/">Vue CLI</a> 是官方提供的基于 Webpack 的 Vue 工具链，它现在处于维护模式。我们建议使用 Vite 开始新的项目，除非你依赖特定的 Webpack 的特性。在大多数情况下，Vite 将提供更优秀的开发体验。</p><p>关于从 Vue CLI 迁移到 Vite 的资源：</p><ul><li><a href="https://vueschool.io/articles/vuejs-tutorials/how-to-migrate-from-vue-cli-to-vite/">VueSchool.io 的 Vue CLI -&gt; Vite 迁移指南</a></li><li><a href="https://github.com/vitejs/awesome-vite#vue-cli">迁移支持工具 &#x2F; 插件</a></li></ul><h3 id="浏览器内模板编译注意事项"><a href="#浏览器内模板编译注意事项" class="headerlink" title="浏览器内模板编译注意事项"></a>浏览器内模板编译注意事项<a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#note-on-in-browser-template-compilation"></a></h3><p>当以无构建步骤方式使用 Vue 时，组件模板要么是写在页面的 HTML 中，要么是内联的 JavaScript 字符串。在这些场景中，为了执行动态模板编译，Vue 需要将模板编译器运行在浏览器中。相对的，如果我们使用了构建步骤，由于提前编译了模板，那么就无须再在浏览器中运行了。为了减小打包出的客户端代码体积，Vue 提供了<a href="https://unpkg.com/browse/vue@3/dist/">多种格式的“构建文件”</a>以适配不同场景下的优化需求。</p><ul><li>前缀为 <code>vue.runtime.*</code> 的文件是<strong>只包含运行时的版本</strong>：不包含编译器，当使用这个版本时，所有的模板都必须由构建步骤预先编译。</li><li>名称中不包含 <code>.runtime</code> 的文件则是<strong>完全版</strong>：即包含了编译器，并支持在浏览器中直接编译模板。然而，体积也会因此增长大约 14kb。</li></ul><p>默认的工具链中都会使用仅含运行时的版本，因为所有单文件组件中的模板都已经被预编译了。如果因为某些原因，在有构建步骤时，你仍需要浏览器内的模板编译，你可以更改构建工具配置，将 <code>vue</code> 改为相应的版本 <code>vue/dist/vue.esm-bundler.js</code>。</p><p>如果你需要一种更轻量级，不依赖构建步骤的替代方案，也可以看看 <a href="https://github.com/vuejs/petite-vue">petite-vue</a>。</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由<a href="https://cn.vuejs.org/guide/scaling-up/routing.html#routing"></a></h1><h2 id="客户端-vs-服务端路由"><a href="#客户端-vs-服务端路由" class="headerlink" title="客户端 vs. 服务端路由"></a>客户端 vs. 服务端路由<a href="https://cn.vuejs.org/guide/scaling-up/routing.html#client-side-vs-server-side-routing"></a></h2><p>服务端路由指的是服务器根据<strong>用户访问的 URL 路径返回不同的响应结果</strong>。当我们在一个传统的服务端渲染的 web 应用中点击一个链接时，浏览器会从服务端获得全新的 HTML，然后重新加载整个页面。</p><p>然而，在<a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA">单页面应用</a>中，客户端的 JavaScript 可以拦截页面的跳转请求，动态获取新的数据，然后<strong>在无需重新加载的情况下更新当前页面</strong>。这样通常可以带来更顺滑的用户体验，尤其是在更偏向“应用”的场景下，因为这类场景下用户通常会在很长的一段时间中做出多次交互。</p><p>在这类单页应用中，“路由”是在<strong>客户端</strong>执行的。一个客户端路由器的职责就是利用诸如 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History">History API</a> 或是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event"><code>hashchange</code> 事件</a>这样的浏览器 API 来管理应用当前应该渲染的视图。 </p><h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理<a href="https://cn.vuejs.org/guide/scaling-up/state-management.html#state-management"></a></h1><h2 id="什么是状态管理？"><a href="#什么是状态管理？" class="headerlink" title="什么是状态管理？"></a>什么是状态管理？<a href="https://cn.vuejs.org/guide/scaling-up/state-management.html#what-is-state-management"></a></h2><p>理论上来说，每一个 Vue 组件实例都已经在“管理”它自己的响应式状态了。我们以一个简单的计数器组件为例：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 状态</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 动作</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 视图 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">count</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>它是一个独立的单元，由以下几个部分组成：</p><ul><li><strong>状态</strong>：驱动整个应用的数据源；</li><li><strong>视图</strong>：对<strong>状态</strong>的一种声明式映射；</li><li><strong>交互</strong>：状态根据用户在<strong>视图</strong>中的输入而作出相应变更的可能方式。</li></ul><p>下面是“单向数据流”这一概念的简单图示：</p><p><img src="https://cn.vuejs.org/assets/state-flow.Cd6No79V.png" alt="state flow diagram"></p><p>然而，当我们有<strong>多个组件共享一个共同的状态</strong>时，就没有这么简单了：</p><ol><li>多个视图可能都依赖于同一份状态。</li><li>来自不同视图的交互也可能需要更改同一份状态。</li></ol><p>对于情景 1，一个可行的办法是将共享状态“提升”到共同的祖先组件上去，再通过 props 传递下来。然而在深层次的组件树结构中这么做的话，很快就会使得代码变得繁琐冗长。这会导致另一个问题：<a href="https://cn.vuejs.org/guide/components/provide-inject.html#prop-drilling">Prop 逐级透传问题</a>。</p><p>对于情景 2，我们经常发现自己会直接通过模板引用获取父&#x2F;子实例，或者通过触发的事件尝试改变和同步多个状态的副本。但这些模式的健壮性都不甚理想，很容易就会导致代码难以维护。</p><p>一个更简单直接的解决方案是抽取出组件间的共享状态，放在一个全局单例中来管理。这样我们的组件树就变成了一个大的“视图”，而任何位置上的组件都可以访问其中的状态或触发动作。</p><h2 id="用响应式-API-做简单状态管理"><a href="#用响应式-API-做简单状态管理" class="headerlink" title="用响应式 API 做简单状态管理"></a>用响应式 API 做简单状态管理<a href="https://cn.vuejs.org/guide/scaling-up/state-management.html#simple-state-management-with-reactivity-api"></a></h2><p>在选项式 API 中，响应式数据是用 <code>data()</code> 选项声明的。在内部，<code>data()</code> 的返回值对象会通过 <a href="https://cn.vuejs.org/api/reactivity-core.html#reactive"><code>reactive()</code></a> 这个公开的 API 函数转为响应式。</p><p>如果你有一部分状态需要在多个组件实例间共享，你可以使用 <a href="https://cn.vuejs.org/api/reactivity-core.html#reactive"><code>reactive()</code></a> 来创建一个响应式对象，并将它导入到多个组件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- ComponentA.vue --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; store &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store.js&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      store</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>From A: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">store.count</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-comment">&lt;!-- ComponentB.vue --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; store &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store.js&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      store</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>From B: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">store.count</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>现在每当 <code>store</code> 对象被更改时，<code>&lt;ComponentA&gt;</code> 与 <code>&lt;ComponentB&gt;</code> 都会自动更新它们的视图。现在我们有了单一的数据源。</p><p>然而，这也意味着任意一个导入了 <code>store</code> 的组件都可以随意修改它的状态：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;store.count++&quot;</span>&gt;</span></span><br><span class="language-xml">    From B: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">store.count</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>虽然这在简单的情况下是可行的，但从长远来看，可以被任何组件任意改变的全局状态是不太容易维护的。为了确保改变状态的逻辑像状态本身一样集中，建议在 store 上定义方法，方法的名称应该要能表达出行动的意图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// store.js</span><br><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;store.increment()&quot;</span>&gt;</span></span><br><span class="language-xml">    From B: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">store.count</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="服务端渲染-SSR"><a href="#服务端渲染-SSR" class="headerlink" title="服务端渲染 (SSR)"></a>服务端渲染 (SSR)<a href="https://cn.vuejs.org/guide/scaling-up/ssr.html#server-side-rendering-ssr"></a></h1><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览<a href="https://cn.vuejs.org/guide/scaling-up/ssr.html#overview"></a></h2><h3 id="什么是-SSR？"><a href="#什么是-SSR？" class="headerlink" title="什么是 SSR？"></a>什么是 SSR？<a href="https://cn.vuejs.org/guide/scaling-up/ssr.html#what-is-ssr"></a></h3><p>Vue.js 是一个用于构建客户端应用的框架。默认情况下，Vue 组件的职责是在浏览器中生成和操作 DOM。然而，Vue 也支持将组件在服务端直接渲染成 HTML 字符串，作为服务端响应返回给浏览器，最后在浏览器端将静态的 HTML“激活”(hydrate) 为能够交互的客户端应用。</p><p>一个由服务端渲染的 Vue.js 应用也可以被认为是“同构的”(Isomorphic) 或“通用的”(Universal)，因为应用的大部分代码同时运行在服务端<strong>和</strong>客户端。</p><h3 id="为什么要用-SSR？"><a href="#为什么要用-SSR？" class="headerlink" title="为什么要用 SSR？"></a>为什么要用 SSR？<a href="https://cn.vuejs.org/guide/scaling-up/ssr.html#why-ssr"></a></h3><p>与客户端的单页应用 (SPA) 相比，SSR 的优势主要在于：</p><ul><li><strong>更快的首屏加载</strong>：这一点在慢网速或者运行缓慢的设备上尤为重要。服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。除此之外，数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。这通常可以带来更高的<a href="https://web.dev/vitals/">核心 Web 指标</a>评分、更好的用户体验，而对于那些“首屏加载速度与转化率直接相关”的应用来说，这点可能至关重要。</li><li><strong>统一的心智模型</strong>：你可以使用相同的语言以及相同的声明式、面向组件的心智模型来开发整个应用，而不需要在后端模板系统和前端框架之间来回切换。</li><li><strong>更好的 SEO</strong>：搜索引擎爬虫可以直接看到完全渲染的页面。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS学习笔记</title>
    <link href="/2024/10/05/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/05/HTML-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">```css的样式文件</span><br><span class="hljs-code"># html5+css3-&gt;H5C3</span><br><span class="hljs-code"></span><br><span class="hljs-code">软件 vscode 像素大厨</span><br><span class="hljs-code"></span><br><span class="hljs-code">## </span><br><span class="hljs-code"></span><br><span class="hljs-code">### 网页：</span><br><span class="hljs-code"></span><br><span class="hljs-code">HTML格式，通过浏览器阅读，图片、文字、音频等元素，HTML文件</span><br><span class="hljs-code"></span><br><span class="hljs-code"># HTML：</span><br><span class="hljs-code"></span><br><span class="hljs-code">超文本标记语言 代码&gt;浏览器&gt;网页</span><br><span class="hljs-code">HTML中不区分大小写，但是我们一般都使用小写</span><br><span class="hljs-code">HTML中的注释不能嵌套</span><br><span class="hljs-code">HTML标签必须结构完整，要么成对出现，要么自结束标签</span><br><span class="hljs-code">HTML标签可以嵌套，但是不能交叉嵌套</span><br><span class="hljs-code">HTML标签中的属性必须有值，且值必须加引号(双引号单引号都可以)</span><br><span class="hljs-code">### Web标准：</span><br><span class="hljs-code"></span><br><span class="hljs-code">结构（HTML）、表现（CSS）、行为（JavaScript）相分离</span><br><span class="hljs-code"></span><br><span class="hljs-code">### HTML标签：</span><br><span class="hljs-code"></span><br><span class="hljs-code">####语法规范：</span><br><span class="hljs-code">&lt;html&gt;&lt;/html&gt;成对出现，双标签</span><br><span class="hljs-code">&lt;br /&gt;单标签 </span><br><span class="hljs-code">标签关系：包含、并列</span><br><span class="hljs-code"></span><br><span class="hljs-code">####结构标签：</span><br><span class="hljs-code">&lt;html&gt;标签 页面中最大的标签，称为根标签</span><br><span class="hljs-code">&lt;head&gt;头部标签，里面必须设置&lt;title&gt;标签</span><br><span class="hljs-code">&lt;title&gt;网页标题</span><br><span class="hljs-code">&lt;body&gt;包含文档所有内容</span><br><span class="hljs-code"></span><br><span class="hljs-code">VScode工具生成骨架标签：</span><br><span class="hljs-code">&lt;!DOCTYPE&gt;标签：文档类型声明，HTML版本，在文档中的最前面 &lt;!DOCTYPE html&gt;</span><br><span class="hljs-code">lang语言：&lt;html lang=&quot;en&quot;&gt;  en ——英文 zh-CN——中文</span><br><span class="hljs-code">charset字符集：&lt;meta charset=&quot;UTF-8&quot;/&gt;</span><br><span class="hljs-code"></span><br><span class="hljs-code">####常用标签</span><br><span class="hljs-code">标签语义</span><br><span class="hljs-code">#####标题标签</span><br><span class="hljs-code">&lt;h1&gt;-&lt;h6&gt;</span><br><span class="hljs-code">作为标题使用，按照重要性递减</span><br><span class="hljs-code">特点：文字加粗变大，独占一行</span><br><span class="hljs-code">#####段落标签</span><br><span class="hljs-code">&lt;p&gt;定义段落 文本在一个段落中会根据浏览器窗口大小自动换行</span><br><span class="hljs-code">#####换行标签</span><br><span class="hljs-code">&lt;br /&gt;单标签 强制换行 </span><br><span class="hljs-code">#####文本格式化标签</span><br><span class="hljs-code">**粗体**、*斜体*、&lt;u&gt;下划线&lt;/u&gt;</span><br><span class="hljs-code">加粗：&lt;strong&gt;&lt;/strong&gt;   &lt;b&gt;&lt;/b&gt;</span><br><span class="hljs-code">倾斜：&lt;em&gt;&lt;/em&gt;   &lt;i&gt;&lt;/i&gt;</span><br><span class="hljs-code">删除线：&lt;del&gt;&lt;/del&gt;    &lt;s&gt;&lt;/s&gt;</span><br><span class="hljs-code">下划线：&lt;ins&gt;&lt;/ins&gt;    &lt;u&gt;&lt;/u&gt;</span><br><span class="hljs-code">#####div、span标签</span><br><span class="hljs-code">&lt;div&gt;、&lt;span&gt;没有语义，用于装内容</span><br><span class="hljs-code">&lt;div&gt;标签用于布局，一行只能放一个&lt;div&gt;</span><br><span class="hljs-code">&lt;span&gt;标签用于布局，一行可以放多个&lt;span&gt;</span><br><span class="hljs-code">#####图像标签</span><br><span class="hljs-code">1.图像标签&lt;img src=&quot;&quot; /&gt;</span><br><span class="hljs-code">src属性：用于指定图像文件的路径、文件名</span><br><span class="hljs-code">其他属性：</span><br><span class="hljs-code">alt属性：图像显示不出来的时候用文字代替</span><br><span class="hljs-code">title属性：鼠标放在图片上提示的文字</span><br><span class="hljs-code">像素属性：</span><br><span class="hljs-code">width属性：图像宽度</span><br><span class="hljs-code">height属性：图像高度</span><br><span class="hljs-code">border属性：图像边框</span><br><span class="hljs-code">1）图像标签可以有多个属性，必须写在标签名后面</span><br><span class="hljs-code">2）属性之间不分先后顺序，以空格分开</span><br><span class="hljs-code">3）key=“value” 键值对</span><br><span class="hljs-code">#####路径</span><br><span class="hljs-code">######1.目录文件夹</span><br><span class="hljs-code">根目录：打开目录文件夹的第一层就是根目录</span><br><span class="hljs-code">######2.路径</span><br><span class="hljs-code">1.相对路径：以引用文件所在位置为参 考基础，建立出的目录路径</span><br><span class="hljs-code">/</span><br><span class="hljs-code">同一级路径：图像文件位于HTML文件同一级 &lt;img src=&quot;baidu.gif&quot;/&gt;</span><br><span class="hljs-code">下一级路径：图像文件位于HTML文件下一级&lt;img src=&quot;images/baidu.gif&quot;/&gt;  </span><br><span class="hljs-code">上一级路径：图像文件位于HTML文件上一级&lt;img src=&quot;../baidu.gif&quot;/&gt;</span><br><span class="hljs-code"></span><br><span class="hljs-code">2.绝对路径:目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径</span><br><span class="hljs-code">\或网络中的图片绝对路径</span><br><span class="hljs-code">#####超链接标签</span><br><span class="hljs-code">&lt;a&gt;:从一个页面链接到另一个页面</span><br><span class="hljs-code">1.语法格式</span><br><span class="hljs-code">&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt; 文本或图像 &lt;/a&gt;</span><br><span class="hljs-code">href 用于指定链接目标的url地址，必须属性</span><br><span class="hljs-code">target： _self 默认当前页面打开    _blank在新窗口打开</span><br><span class="hljs-code">2.链接分类</span><br><span class="hljs-code"></span><br><span class="hljs-code">1.外部链接 href=&quot;http://....&quot;</span><br><span class="hljs-code">2.内部链接：网站内部页面之间的相互链接 href=&quot;index.html&quot; 直接链接内部页面名称</span><br><span class="hljs-code">3.空链接 &lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;</span><br><span class="hljs-code">4.下载链接 href地址为一个.exe文件或.zip压缩包</span><br><span class="hljs-code">5.网页元素链接 文本、图像、表格、音频、视频都可以添加超链接</span><br><span class="hljs-code">6.锚点链接 点击链接可以快速定位到页面的某个位置</span><br><span class="hljs-code"></span><br><span class="hljs-code">- 在链接文本的href属性中设置属性为#名字的形式，如&lt;a href=&quot;#two&quot;&gt;第二集&lt;/a&gt;</span><br><span class="hljs-code">- 在目标位置标签处添加id属性，如&lt;h3 id=&quot;two&quot;&gt;第二集介绍&lt;/h3&gt; </span><br><span class="hljs-code">####注释标签</span><br><span class="hljs-code">便于阅读和理解而不显示在页面中的注释文字</span><br><span class="hljs-code">&lt;!-- xxxxx --&gt;   crtl+/</span><br><span class="hljs-code">####特殊字符</span><br><span class="hljs-code">空格符 &amp;nbsp;</span><br><span class="hljs-code">小于号 &amp;lt;</span><br><span class="hljs-code">大于号 &amp;gt;</span><br><span class="hljs-code">####表格标签</span><br><span class="hljs-code">表格：</span><br><span class="hljs-code">1.显示、展示数据</span><br><span class="hljs-code">2.基本语法</span><br><span class="hljs-code">&lt;table&gt;</span><br><span class="hljs-code">  &lt;tr&gt;    定义表格中的行</span><br><span class="hljs-code">    &lt;td&gt;单元格内的文字&lt;/td&gt; 定义单元格的内容 table data</span><br><span class="hljs-code">  &lt;/tr&gt;</span><br><span class="hljs-code">&lt;/table&gt;</span><br><span class="hljs-code">3.表头标签</span><br><span class="hljs-code">&lt;table&gt;</span><br><span class="hljs-code">  &lt;tr&gt;</span><br><span class="hljs-code">    &lt;th&gt;姓名&lt;/th&gt;  table head 加粗居中</span><br><span class="hljs-code">  &lt;/tr&gt;</span><br><span class="hljs-code">&lt;/table&gt;</span><br><span class="hljs-code">4.表格属性</span><br><span class="hljs-code">align (left cengter right) 表格相对周围元素的对齐方式</span><br><span class="hljs-code">border 1or&quot;&quot; 规定表格单元是否有边框</span><br><span class="hljs-code">cellpadding 像素值，规定表格单元边沿与其内容之间的空白，默认为1</span><br><span class="hljs-code">cellspacing 像素值，规定单元格之间的空白，默认为2</span><br><span class="hljs-code">width 像素值或百分比，规定表格的宽度</span><br><span class="hljs-code">5.结构标签</span><br><span class="hljs-code">区域</span><br><span class="hljs-code">&lt;thead&gt;标签头部，内部必须包含&lt;tr&gt;标签</span><br><span class="hljs-code">&lt;tbody&gt;标签主体</span><br><span class="hljs-code">6.合并单元格</span><br><span class="hljs-code">把多个单元格合并为一个单元格</span><br><span class="hljs-code">跨行合并：rowspan=“合并单元格个数” 最上侧单元格为目标单元格，写合并代码 &lt;td rowspan=&quot;2&quot;&gt;</span><br><span class="hljs-code">跨列合并：colspan=“合并单元格个数” 最左侧单元格为目标单元格，写合并代码 &lt;td colspan=&quot;2&quot;&gt;</span><br><span class="hljs-code">####列表标签</span><br><span class="hljs-code">用于布局，整齐有序</span><br><span class="hljs-code">#####**无序列表**</span><br><span class="hljs-code">&lt;ul&gt;标签表示HTML页面中的无序列表，一般以项目符号呈现列表项，列表项使用&lt;li&gt;标签定义</span><br><span class="hljs-code">&lt;ul&gt;</span><br><span class="hljs-code">  &lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="hljs-code">  ...</span><br><span class="hljs-code">&lt;/ul&gt;</span><br><span class="hljs-code">1.没有顺序之分</span><br><span class="hljs-code">2.&lt;ul&gt;中只能嵌套&lt;li&gt;，输入其他标签或文字不被允许</span><br><span class="hljs-code">3.&lt;li&gt;中可以放任何元素</span><br><span class="hljs-code">4.无序列表会有自己的样式属性，用css设置</span><br><span class="hljs-code">#####有序列表</span><br><span class="hljs-code">&lt;ol&gt;标签用于定义有序列表，列表排序用数字来显示</span><br><span class="hljs-code">&lt;ol&gt;</span><br><span class="hljs-code">  &lt;li&gt;列表项1&lt;/li&gt;</span><br><span class="hljs-code">  ...</span><br><span class="hljs-code">&lt;/ol&gt;</span><br><span class="hljs-code">#####自定义列表</span><br><span class="hljs-code">用于对术语或名词进行解释和描述</span><br><span class="hljs-code">&lt;dl&gt;</span><br><span class="hljs-code">  &lt;dt&gt;名词1&lt;/dt&gt;   定义项目/名字</span><br><span class="hljs-code">  &lt;dd&gt;名词1解释1&lt;/dd&gt;</span><br><span class="hljs-code">  &lt;dd&gt;名词1解释2&lt;/dd&gt;</span><br><span class="hljs-code">&lt;/dl&gt;</span><br><span class="hljs-code">1.&lt;dl&gt;包含里只能&lt;dt&gt;&lt;dd&gt;</span><br><span class="hljs-code">2.通常是一个&lt;dt&gt;对应多个&lt;dd&gt;</span><br><span class="hljs-code">####表单标签</span><br><span class="hljs-code">用于收集用户信息</span><br><span class="hljs-code">表单的组成</span><br><span class="hljs-code">1.表单域</span><br><span class="hljs-code">&lt;form&gt;标签用于定义表单域，会把范围内的表单元素信息提交给**服务器**</span><br><span class="hljs-code">&lt;form action=&quot;url地址&quot; method=&quot;提交方式get/post&quot; name=&quot;表单域名称&quot;&gt;</span><br><span class="hljs-code">    各种表单元素控件</span><br><span class="hljs-code">&lt;/form&gt;</span><br><span class="hljs-code">url地址用于指定接收并处理表单数据的服务器程序的地址</span><br><span class="hljs-code">2.表单控件（表单元素）</span><br><span class="hljs-code"> - &lt;input&gt;表单元素 &lt;input type=&quot;...&quot; /&gt; type属性设置不同控件类型</span><br><span class="hljs-code"> radio 单选按钮，实现多选一，name值相同时可以多选一</span><br><span class="hljs-code"> checkbox 复选框，实现多选</span><br><span class="hljs-code"> file 文件域，上传使用的文件</span><br><span class="hljs-code"> input除type属性外，其他属性：</span><br><span class="hljs-code"> name：定义input元素名称，单选按钮和复选框都要有相同的name值</span><br><span class="hljs-code"> value：规定input元素的值</span><br><span class="hljs-code"> checked：规定此input元素**首次加载时应被选中**，属性值为checked</span><br><span class="hljs-code"> maxlength：规定输入字段中的字符的最大长度</span><br><span class="hljs-code"> &lt;label&gt;标签为input元素定义标注，绑定一个表单元素，当点击&lt;label&gt;标签内的文本时浏览器自动将光标转到对应的表单元素上</span><br><span class="hljs-code"> &lt;input type=&quot;radio&quot; id=&quot;male&quot;&gt;</span><br><span class="hljs-code"> &lt;label for=&quot;male&quot;&gt;男&lt;/label&gt;</span><br><span class="hljs-code"> - &lt;select&gt;表单元素 有多个选项让用户选择，定义下拉列表</span><br><span class="hljs-code"> &lt;select&gt;</span><br><span class="hljs-code">      &lt;option&gt;xxx&lt;/option&gt;</span><br><span class="hljs-code">      &lt;option&gt;xxx&lt;/option&gt;</span><br><span class="hljs-code">&lt;/select&gt;</span><br><span class="hljs-code">1.&lt;select&gt;至少包含一对&lt;option&gt;</span><br><span class="hljs-code">2.在&lt;option&gt;中定义selected=&quot;selected&quot;，当前项即为默认选中项</span><br><span class="hljs-code">- &lt;textarea&gt;表单元素 当用户输入内容较多的情况下，定义多行文本输入</span><br><span class="hljs-code">&lt;textarea rows=&quot;xx&quot; cols=&quot;xx&quot;&gt;</span><br><span class="hljs-code">文本内容</span><br><span class="hljs-code">&lt;/textarea&gt;</span><br><span class="hljs-code"></span><br><span class="hljs-code">3.提示信息</span><br><span class="hljs-code"></span><br><span class="hljs-code">www.w3school.com</span><br><span class="hljs-code"></span><br><span class="hljs-code">#CSS</span><br><span class="hljs-code">层叠样式表，美化网页布局页面</span><br><span class="hljs-code">1.css语法规范</span><br><span class="hljs-code">选择器加上一条或多条声明</span><br><span class="hljs-code">h1&#123;color:red;&#125;</span><br><span class="hljs-code">2.代码风格</span><br><span class="hljs-code">- 样式格式书写：展开格式</span><br><span class="hljs-code">- 样式大小写：小写</span><br><span class="hljs-code">- 空格规范：属性值前冒号后加一个空格，选择器和大括号加一个空格</span><br><span class="hljs-code">##基础选择器</span><br><span class="hljs-code">###标签选择器</span><br><span class="hljs-code">按标签名称进行分类</span><br><span class="hljs-code">语法：</span><br><span class="hljs-code">标签名&#123;</span><br><span class="hljs-code">    属性1: 属性值1;</span><br><span class="hljs-code">    ...</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">###类选择器</span><br><span class="hljs-code">差异化选择不同标签</span><br><span class="hljs-code">.类名&#123;</span><br><span class="hljs-code">    属性1: 属性值1;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&lt;div class=&quot;red&quot;&gt;</span><br><span class="hljs-code">一个标签可以用多个名字</span><br><span class="hljs-code">###id选择器</span><br><span class="hljs-code">（）#类名&#123;</span><br><span class="hljs-code">    属性1: 属性值1；</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">&lt;div id=&quot;red&quot;&gt; id选择器只能被调用一次</span><br><span class="hljs-code">###通配符选择器</span><br><span class="hljs-code">选取页面所有标签元素</span><br><span class="hljs-code">* &#123;</span><br><span class="hljs-code">    属性1: 属性值1；</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">##字体属性</span><br><span class="hljs-code">font-family定义文本字体</span><br><span class="hljs-code">各种字体间必须用英文状态下的逗号隔开</span><br><span class="hljs-code">一般情况下有空格隔开的多个单词组成的字体加引号</span><br><span class="hljs-code">font-size定义字体大小</span><br><span class="hljs-code">20px；标题标签需要单独指定文字大小</span><br><span class="hljs-code">font-weight定义文字粗细</span><br><span class="hljs-code">normal|bold|bolder|lighter|number</span><br><span class="hljs-code">font-style定义文本风格（斜体）</span><br><span class="hljs-code">normal|italic</span><br><span class="hljs-code">给斜体标签&lt;em&gt;&lt;i&gt;改为normal不倾斜字体</span><br><span class="hljs-code">font复合属性：</span><br><span class="hljs-code">font:font-style font-weight **font-size**/line-height **font-family**;固定顺序</span><br><span class="hljs-code">##文本属性</span><br><span class="hljs-code">外观、颜色、对齐文本、装饰文本、缩进、行间距</span><br><span class="hljs-code">color定义颜色</span><br><span class="hljs-code">- 预定义的颜色值</span><br><span class="hljs-code">- 十六进制</span><br><span class="hljs-code">- RGB代码</span><br><span class="hljs-code"></span><br><span class="hljs-code">text-align属性用于设置文本水平对齐方式</span><br><span class="hljs-code">center、left、right</span><br><span class="hljs-code">text-decoration定义下划线、删除线、上划线</span><br><span class="hljs-code">none|underline|overline|line-through</span><br><span class="hljs-code">text-indent定义段落首行缩进</span><br><span class="hljs-code">text-indent：20px；2em；（一个em是一个文字大小）</span><br><span class="hljs-code">line-height定义行间距离</span><br><span class="hljs-code">行间距=上间距+文本高度+下间距</span><br><span class="hljs-code"></span><br><span class="hljs-code"></span><br><span class="hljs-code">##CSS引入方式</span><br><span class="hljs-code">内部样式表：将CSS放入HTML页面&lt;style&gt;标签中</span><br><span class="hljs-code">行内样式表：标签内部style=“...&quot;</span><br><span class="hljs-code">外部样式表：新建一个后缀为.css的样式文件，在HTML文件使用&lt;link&gt;标签引入 &lt;link rel=&quot;stylesheet&quot; href=“CSS文件路径“&gt;</span><br><span class="hljs-code"></span><br><span class="hljs-code">##Emmet语法</span><br><span class="hljs-code">使用缩写提高html/css编写速度</span><br><span class="hljs-code">...</span><br><span class="hljs-code"></span><br><span class="hljs-code">##复合选择器</span><br><span class="hljs-code">###后代选择器</span><br><span class="hljs-code">可以选择父元素里面的子元素</span><br><span class="hljs-code">元素1 元素2 &#123;</span><br><span class="hljs-code">    样式声明</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">选择元素1里所有的元素2</span><br><span class="hljs-code">###子选择器</span><br><span class="hljs-code">选择元素最近一级子元素 </span><br><span class="hljs-code">元素1&gt;元素2&#123;</span><br><span class="hljs-code">    样式声明</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">###并集选择器</span><br><span class="hljs-code">选择多组标签定义相同的样式</span><br><span class="hljs-code">元素1,元素2&#123;</span><br><span class="hljs-code">    样式声明</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">任何选择器都可以作为并集选择器的一部分</span><br><span class="hljs-code">###伪类选择器</span><br><span class="hljs-code">向选择器加特殊效果</span><br><span class="hljs-code">链接伪类：</span><br><span class="hljs-code">a:link 选择所有未被访问的链接</span><br><span class="hljs-code">a:visited 选择所以已被访问的链接</span><br><span class="hljs-code">a:hover 选择鼠标指针位于其上的链接</span><br><span class="hljs-code">a:active 选择活动链接</span><br><span class="hljs-code">顺序：l v h a</span><br><span class="hljs-code"></span><br><span class="hljs-code">focus伪类：</span><br><span class="hljs-code">用于选取**获得焦点**的表单元素</span><br><span class="hljs-code">input:focus&#123;</span><br><span class="hljs-code">    background-color:pink;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">##元素显示模式</span><br><span class="hljs-code">块元素</span><br><span class="hljs-code">&lt;div&gt; &lt;p&gt; &lt;ul&gt;</span><br><span class="hljs-code">- 独占一行</span><br><span class="hljs-code">- 高度宽度内外边距可以调整</span><br><span class="hljs-code">- 里面可以放行内或级块元素</span><br><span class="hljs-code">- 文字类元素里面不能使用级块元素</span><br><span class="hljs-code"></span><br><span class="hljs-code">行元素</span><br><span class="hljs-code">&lt;span&gt;&lt;a&gt;</span><br><span class="hljs-code">- 一行可以显示多个</span><br><span class="hljs-code">- 高宽直接设置无效</span><br><span class="hljs-code">- 行内元素只能容纳文本或其他行内元素</span><br><span class="hljs-code"></span><br><span class="hljs-code">行内块元素</span><br><span class="hljs-code">&lt;img&gt;&lt;input&gt;&lt;td&gt;</span><br><span class="hljs-code">- 相邻行内块元素在一行上，之间有空白缝隙</span><br><span class="hljs-code">- 默认宽度为本身内容宽度</span><br><span class="hljs-code">- 高度行高外边距内边距都可以控制</span><br><span class="hljs-code"></span><br><span class="hljs-code">元素显示模式转换</span><br><span class="hljs-code">&lt;a&gt;</span><br><span class="hljs-code">行转换为块：display:block；</span><br><span class="hljs-code">块转换为行：display:inline；</span><br><span class="hljs-code">转换为行内块元素：display:inline-block;</span><br><span class="hljs-code"></span><br><span class="hljs-code">##背景</span><br><span class="hljs-code">背景颜色</span><br><span class="hljs-code">background-color:transparent|color;</span><br><span class="hljs-code">背景图片</span><br><span class="hljs-code">便于控制 位置，用于logo、装饰性小图片或超大背景图片</span><br><span class="hljs-code">background-image:none|url();</span><br><span class="hljs-code">背景平铺</span><br><span class="hljs-code">backgroung-repeat:repeat|no-repeat|repeat-x|repeat-y</span><br><span class="hljs-code">背景图片位置</span><br><span class="hljs-code">backgroung-position:x y;</span><br><span class="hljs-code">x和y可以使用方位名词（top、center、bottom、left、right）或精确单位（第一个为x坐标，第二个为y坐标）</span><br><span class="hljs-code">背景图像固定</span><br><span class="hljs-code">background-attachment:scroll|fixed</span><br><span class="hljs-code">复合写法：</span><br><span class="hljs-code">background:color url repeat attachment position</span><br><span class="hljs-code">背景色半透明</span><br><span class="hljs-code">background : rgba(0,0,0,0.3)</span><br><span class="hljs-code">alpha在0-1之间，表示透明度</span><br><span class="hljs-code"></span><br><span class="hljs-code"></span><br><span class="hljs-code">优先级：</span><br><span class="hljs-code">继承或* 0,0,0,0</span><br><span class="hljs-code">元素选择器 0,0,0,1</span><br><span class="hljs-code">类选择器 0,0,1，0</span><br><span class="hljs-code">ID选择器 0,1，0，0</span><br><span class="hljs-code">！important 无限大</span><br><span class="hljs-code">复合选择器会涉及到权重叠加，需要计算权重，权重之间没有进位</span><br><span class="hljs-code">##盒子模型</span><br><span class="hljs-code">页面布局：盒子模型、浮动、定位</span><br><span class="hljs-code">盒子：边框、内外边距、实际内容</span><br><span class="hljs-code">padding内边距 margin外边距</span><br><span class="hljs-code">边框border：边框宽度、边框样式、边框颜色</span><br><span class="hljs-code">border-width</span><br><span class="hljs-code">border-style:none|hidden|dotted（点线边框）|dashed（虚线)|solid（实线边框）|groove</span><br><span class="hljs-code">border-color</span><br><span class="hljs-code">边框简写：1px solid red；无顺序 border-top（上边框）</span><br><span class="hljs-code">border-collapse:collapse;相邻边框合并在一起</span><br><span class="hljs-code">边框会影响盒子大小</span><br><span class="hljs-code">内边距padding：边框与内容之间的距离</span><br><span class="hljs-code"></span><br><span class="hljs-code">padding:5px;上下左右</span><br><span class="hljs-code">padding:5px 10px;上下 左右</span><br><span class="hljs-code">padding:5px 10px 20px;上 左右 下</span><br><span class="hljs-code">padding:5px 10px 20px 30px;上 右 下 左</span><br><span class="hljs-code"></span><br><span class="hljs-code">内边距会影响盒子大小，如果盒子本身没有指定width/height属性则padding不会撑开盒子大小</span><br><span class="hljs-code">外边距margin：盒子与盒子之间的距离</span><br><span class="hljs-code">外边距应用：让盒子水平居中：条件1盒子指定了宽度 条件2左右外边距设置为auto 让行内元素或行内块元素水平居中：给父元素添加text-align:center</span><br><span class="hljs-code">嵌套块元素垂直外边距的塌陷：</span><br><span class="hljs-code">对于两个嵌套关系（父子关系）的块元素，父元素上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</span><br><span class="hljs-code">解决方案：</span><br><span class="hljs-code">- 为父元素定义上边框</span><br><span class="hljs-code">- 为父元素定义上内边距</span><br><span class="hljs-code">- 为父元素添加overflow:hidden</span><br><span class="hljs-code"></span><br><span class="hljs-code">清除内外边距：</span><br><span class="hljs-code">*&#123;</span><br><span class="hljs-code">    padding:0;</span><br><span class="hljs-code">    margin:0;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">##圆角边框</span><br><span class="hljs-code">border-radius属性用于设置元素的外边框圆角</span><br><span class="hljs-code">border-radius:length;   length取值可以为px或% 50%表示圆形 设置为高度一半为圆角矩形</span><br><span class="hljs-code">圆与边框的交集形成圆角效果</span><br><span class="hljs-code">##盒子阴影</span><br><span class="hljs-code">box-shadow：h-shadow v-shadow blur spread color inset</span><br><span class="hljs-code">h-shadow:水平阴影位置必须为负值</span><br><span class="hljs-code">v-shadow:垂直阴影位置必须为负值</span><br><span class="hljs-code">##浮动</span><br><span class="hljs-code">改变元素标签默认排列方式</span><br><span class="hljs-code">**多个块级元素纵向排列找标准流 横向排列找浮动**</span><br><span class="hljs-code">选择器&#123;</span><br><span class="hljs-code">    float：none|left|right</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">浮动特性：</span><br><span class="hljs-code">1.脱离标准流，不再保留原先位置</span><br><span class="hljs-code"></span><br><span class="hljs-code">![72606426624](C:\Users\86198\AppData\Local\Temp\1726064266249.png)</span><br><span class="hljs-code"></span><br><span class="hljs-code">2.如果多个盒子都设置了浮动，则会按照属性值一行内显示并且顶端对齐排列</span><br><span class="hljs-code">3.任何元素添加浮动之后有行内块元素相似的特性 </span><br><span class="hljs-code"></span><br><span class="hljs-code">为了约束浮动元素的位置，通常使用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置 </span><br><span class="hljs-code">清除浮动：清除浮动元素造成的排版影响</span><br><span class="hljs-code">选择器&#123;</span><br><span class="hljs-code">    clear：属性值；</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">left|right|both </span><br><span class="hljs-code">额外标签法（隔墙法）：在浮动元素末尾添加一个空的标签 &lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt; or &lt;div class=&quot;clear&quot; &gt;&lt;/div&gt;</span><br><span class="hljs-code">父级添加overflow：overflow:hidden;</span><br><span class="hljs-code">after伪元素法：</span><br><span class="hljs-code">双伪元素清除浮动 </span><br><span class="hljs-code"></span><br><span class="hljs-code">##定位</span><br><span class="hljs-code">定位模式+边偏移</span><br><span class="hljs-code">position属性：static|relative|absolute|fixed</span><br><span class="hljs-code">边偏移：top left right bottom</span><br><span class="hljs-code"></span><br><span class="hljs-code">1.static静态定位</span><br><span class="hljs-code">默认定位方式，无定位</span><br><span class="hljs-code">2.relative相对定位</span><br><span class="hljs-code">元素移动时相对于原来的位置</span><br><span class="hljs-code">选择器</span><br><span class="hljs-code">&#123;</span><br><span class="hljs-code">    position:relative;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待他</span><br><span class="hljs-code">3.absolute绝对定位</span><br><span class="hljs-code">移动相动时相对于祖先元素</span><br><span class="hljs-code">没有祖先元素或祖先元素没有定位，以浏览器为准定位</span><br><span class="hljs-code">如果祖先元素有定位，则以最近一级的有定位祖先元素为参考点移动位置</span><br><span class="hljs-code">绝对定位不再占有原先位置</span><br><span class="hljs-code">4.fixed固定定位</span><br><span class="hljs-code">元素固定在浏览器**可视区**的位置，在浏览器页面滚动时元素位置不改变</span><br><span class="hljs-code">和父元素无关，不随滚动条滚动</span><br><span class="hljs-code">不占有原先位置</span><br><span class="hljs-code">- 固定定位小技巧：固定在版心右侧位置</span><br><span class="hljs-code">1.固定定位盒子left：50% 走到浏览器可视区一半的位置</span><br><span class="hljs-code">2.固定定位盒子margin-left：版心宽度一半距离 </span><br><span class="hljs-code">5.sticky粘性定位</span><br><span class="hljs-code">选择器&#123;</span><br><span class="hljs-code">    position：sticky；</span><br><span class="hljs-code">    top：10px；</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">以浏览器可视窗口为参照点移动元素（固定定位特点）</span><br><span class="hljs-code">粘性定位占有原先位置（相对定位特点）</span><br><span class="hljs-code">必须添加top、left、right、bottom其中一个才有效</span><br><span class="hljs-code"></span><br><span class="hljs-code">定位叠放次序z-index</span><br><span class="hljs-code">数值可以是正整数、负整数或0；默认为auto，数值越大，盒子越靠上</span><br><span class="hljs-code">如果属性值相同，按照书写顺序后来居上</span><br><span class="hljs-code">数字后面不加单位</span><br><span class="hljs-code">只有定位的盒子才有该属性</span><br><span class="hljs-code"></span><br><span class="hljs-code">绝对定位和固定定位和浮动类似</span><br><span class="hljs-code">行内元素添加绝对或固定定位，可以直接设置高度和宽度</span><br><span class="hljs-code">块级元素添加绝对或者固定定位，如果不给宽度或高度，默认大小是内容大小</span><br><span class="hljs-code">浮动元素、定位元素都不会触发外边距合并问题</span><br><span class="hljs-code"></span><br><span class="hljs-code">绝对定位会完全压住盒子</span><br><span class="hljs-code">浮动元素只会压住标准流的盒子，不会压住标准流盒子里面的文字和图片</span><br><span class="hljs-code"></span><br><span class="hljs-code">#CSS高级技巧</span><br><span class="hljs-code">##精灵图（sprites）</span><br><span class="hljs-code">有效减少服务器接收和发送请求的次数，提高页面加载速度</span><br><span class="hljs-code">原理：将网页中的一些小背景图像整合到一张大图中，这样服务器只需要一次请求就可以</span><br><span class="hljs-code"></span><br><span class="hljs-code">核心：</span><br><span class="hljs-code">1.主要针对背景图片使用，把多个小背景图片整合到一张大图片中</span><br><span class="hljs-code">2.移动背景图片位置，可以使用background-position</span><br><span class="hljs-code">3.移动距离就是这个目标图片的x和y坐标</span><br><span class="hljs-code">4.往上往左移动数值是负值</span><br><span class="hljs-code">5.使用精灵图需要精确测量每个小背景图片的大小和位置</span><br><span class="hljs-code">##字体图标iconfont</span><br><span class="hljs-code">字体图标展示的是图标本质属于字体</span><br><span class="hljs-code">适合结构和样式比较简单的小图标</span><br><span class="hljs-code">下载网站：</span><br><span class="hljs-code">http://icomoon.io</span><br><span class="hljs-code">http://www.iconfont.cn/</span><br><span class="hljs-code">1.把下载包里面的fonts文件放入页面根目录下</span><br><span class="hljs-code">2.在CSS样式中全局声明字体 style.css</span><br><span class="hljs-code">3.在html标签内添加小图标 在demo.html文件中查找</span><br><span class="hljs-code">4.声明字体ifont-family</span><br><span class="hljs-code"></span><br><span class="hljs-code">字体图标的追加：把压缩包里的selection.json从新上传，然后选中需要的新图标，从新下载压缩包，并替换原来的文件</span><br><span class="hljs-code">##CSS三角</span><br><span class="hljs-code">网页中的常见三角形直接用CSS画出来，不必做成图片或字体图标</span><br><span class="hljs-code">div&#123;</span><br><span class="hljs-code">    width:0;</span><br><span class="hljs-code">    height:0;</span><br><span class="hljs-code">    border:50px solid transparent;</span><br><span class="hljs-code">    border-left-color:pink;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">##CSS用户界面样式</span><br><span class="hljs-code">###更改用户鼠标样式 cursor</span><br><span class="hljs-code">li&#123;</span><br><span class="hljs-code">    cursor:default;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">default：小白 默认</span><br><span class="hljs-code">pointer：小手</span><br><span class="hljs-code">move：移动</span><br><span class="hljs-code">text：文本</span><br><span class="hljs-code">not-allowed：禁止</span><br><span class="hljs-code">###轮廓线 outline</span><br><span class="hljs-code">给表单添加outline：0或者outline：none样式之后就可以去掉默认蓝色边框</span><br><span class="hljs-code">###防止拖拽文本域 resize</span><br><span class="hljs-code">resize:none</span><br><span class="hljs-code"></span><br><span class="hljs-code">##vertical-align属性应用</span><br><span class="hljs-code">用于设置图片或表单和文字的垂直对齐 行内元素或行内块元素</span><br><span class="hljs-code">vertical-align：baseline|top|middle|bottom</span><br><span class="hljs-code">baseline：默认 元素放置在父元素的基线上</span><br><span class="hljs-code">top：把元素顶端与行中最高元素的顶端对齐</span><br><span class="hljs-code">middle：把此元素放置在父元素的中部</span><br><span class="hljs-code">bottom：把元素顶端与行中最低的元素的顶端对齐</span><br><span class="hljs-code"></span><br><span class="hljs-code">##溢出文字省略号显示</span><br><span class="hljs-code">###单行文本</span><br><span class="hljs-code">1.强制一行内显示文本</span><br><span class="hljs-code">white-space：nowrap；（默认normal自动换行）</span><br><span class="hljs-code">2.超出部分隐藏</span><br><span class="hljs-code">overflow：hidden；</span><br><span class="hljs-code">3.文字用省略号替代超出的部分</span><br><span class="hljs-code">text-overflow：ellipsis；</span><br><span class="hljs-code">###多行文本</span><br><span class="hljs-code">适合于webKit浏览器</span><br><span class="hljs-code"></span><br><span class="hljs-code">##CSS初始化</span><br><span class="hljs-code">CSS初始化指重设浏览器的样式（CSS reset)</span><br><span class="hljs-code">每个网页都必须进行CSS初始化</span><br><span class="hljs-code"></span><br><span class="hljs-code"></span><br><span class="hljs-code">#HTML5新增特性</span><br><span class="hljs-code">header头部标签</span><br><span class="hljs-code">nav导航标签</span><br><span class="hljs-code">aside侧边栏</span><br><span class="hljs-code">section定义文档某个区域</span><br><span class="hljs-code">article内容标签</span><br><span class="hljs-code">footer尾部标签</span><br><span class="hljs-code"></span><br><span class="hljs-code">audio音频</span><br><span class="hljs-code">video视频 支持MP4 WebM Ogg 尽量使用MP4 </span><br><span class="hljs-code">属性</span><br><span class="hljs-code">autoplay =“autoplay&quot;自动播放</span><br><span class="hljs-code">controls=“controls”向用户显示播放控件</span><br><span class="hljs-code"></span><br><span class="hljs-code">#CSS3新增特性</span><br><span class="hljs-code">1.属性选择器</span><br><span class="hljs-code"> E[att]选择具有att属性的E元素</span><br><span class="hljs-code"> E[att=&quot;val&quot;]</span><br><span class="hljs-code"> E[att^=&quot;val&quot;] att属性以val开头的E元素</span><br><span class="hljs-code"> E[att$=&quot;val&quot;] att属性以val结尾的E元素</span><br><span class="hljs-code"> E[att*=&quot;val&quot;] att属性值中含有val的E元素</span><br><span class="hljs-code"></span><br><span class="hljs-code">2.结构伪类选择器</span><br><span class="hljs-code">根据文档结构选择元素，常用于父级选择器里面的子元素</span><br><span class="hljs-code">E:first-child 匹配父元素中的第一个子元素E</span><br><span class="hljs-code">E:last-child</span><br><span class="hljs-code">E:nth-child(n) 选择某个父元素的一个或多个特定的子元素</span><br><span class="hljs-code">**n可以是数字、关键字和公式**</span><br><span class="hljs-code"> n是数字，选择第n个元素</span><br><span class="hljs-code"> n是关键字：even偶数 odd奇数</span><br><span class="hljs-code"> n是公式：n从0开始 2n代表偶数 2n+1代表奇数</span><br><span class="hljs-code">n+5 从第五个开始到最后</span><br><span class="hljs-code">-n+5 前五个包括第五个</span><br><span class="hljs-code">E:first-of-type</span><br><span class="hljs-code">E:last-of-type</span><br><span class="hljs-code">E:nth-of-type(n)</span><br><span class="hljs-code">nth=child:对父元素里面的所有孩子排序选择，先找到第n个孩子，然后看是否匹配</span><br><span class="hljs-code">nth-of-child：对父元素里面指定子元素进行排序选择。先匹配E，再根据E找第n个孩子</span><br><span class="hljs-code"></span><br><span class="hljs-code">过渡 和：hover一起使用</span><br><span class="hljs-code">transition：要过渡的属性 花费时间 运动曲线 何时开始；</span><br><span class="hljs-code">运动曲线：默认为ease（逐渐慢下来） linear  ease-in ease-out ease-in-out</span><br><span class="hljs-code">如果要写多个属性，用逗号分割，想要所有属性变化可以用all</span><br><span class="hljs-code"></span><br><span class="hljs-code"></span><br><span class="hljs-code">转换  可以实现元素位移、旋转、缩放</span><br><span class="hljs-code">transform：</span><br><span class="hljs-code">2D转换</span><br><span class="hljs-code">translate 优点：不会影响其他元素的位置</span><br><span class="hljs-code">transform:translate(x,y)</span><br><span class="hljs-code">translate中的百分比单位是相对于自身元素的</span><br><span class="hljs-code">对行内标签没有效果</span><br><span class="hljs-code">rotate 旋转</span><br><span class="hljs-code">transform：rotate（度数）</span><br><span class="hljs-code">rotate度数单位是deg</span><br><span class="hljs-code">角度为正时顺时针负时为逆时针，默认旋转中心为元素中心点</span><br><span class="hljs-code">转换中心点：transform-origin：x y；</span><br><span class="hljs-code">scale 缩放 优点：不会影响其他盒子可以设置中心点缩放</span><br><span class="hljs-code">transform：scale（x，y)</span><br><span class="hljs-code">1.x和y是数字，表示缩放倍数</span><br><span class="hljs-code">2.只有一个数字表示等比例缩放 </span><br><span class="hljs-code">同时使用多个转换，格式为transform：translate() rotate() scale() 位移必须在最前面</span><br><span class="hljs-code"></span><br><span class="hljs-code">动画 animation 设置多个节点来精确控制一个或一组动画</span><br><span class="hljs-code">1.先定义动画</span><br><span class="hljs-code">用keyframes定义动画</span><br><span class="hljs-code">@ketframes 动画名称&#123;</span><br><span class="hljs-code">    0%(from)&#123;</span><br><span class="hljs-code">        width:100px;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">    100%(to)&#123;</span><br><span class="hljs-code">        width:200px;</span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code">&#125;</span><br><span class="hljs-code">2.再使用动画</span><br><span class="hljs-code">animation-name:...;</span><br><span class="hljs-code">animation-duration:...;</span><br><span class="hljs-code"></span><br><span class="hljs-code">常用属性：</span><br><span class="hljs-code">必须：</span><br><span class="hljs-code">**animation-name:...;</span><br><span class="hljs-code">animation-duration:...;持续时间**</span><br><span class="hljs-code">animation-timing-function 规定默认速度曲线</span><br><span class="hljs-code">animation-delay:</span><br><span class="hljs-code">animation-iteration-count 规定动画被播放次数 infinite 无限</span><br><span class="hljs-code">animation-direction 规定下一周期是否逆向播放 默认为normal alternate逆播放</span><br><span class="hljs-code">animation-play-state 规定动画是否正在运行或暂停</span><br><span class="hljs-code">animation-fill-mode 规定动画结束后状态 保持forwards回到起始backwards</span><br><span class="hljs-code"></span><br><span class="hljs-code">3D转换 近大远小物体后面遮挡不可见</span><br><span class="hljs-code">x轴：水平向右 右边是正值</span><br><span class="hljs-code">y轴：垂直向下 下面是正值</span><br><span class="hljs-code">z轴：垂直屏幕 往外面是正值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/07/hello-world/"/>
    <url>/2024/09/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
